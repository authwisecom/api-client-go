// GENERATED BY go:generate. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: authwise/authorize/v1alpha1/grpc.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthwiseAuthorizeService_GetUserState_FullMethodName       = "/authwise.authorize.v1alpha1.AuthwiseAuthorizeService/GetUserState"
	AuthwiseAuthorizeService_UserSelectProvider_FullMethodName = "/authwise.authorize.v1alpha1.AuthwiseAuthorizeService/UserSelectProvider"
)

// AuthwiseAuthorizeServiceClient is the client API for AuthwiseAuthorizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthwiseAuthorizeServiceClient interface {
	GetUserState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserStateResponse, error)
	UserSelectProvider(ctx context.Context, in *UserSelectProvider, opts ...grpc.CallOption) (*GetUserStateResponse, error)
}

type authwiseAuthorizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthwiseAuthorizeServiceClient(cc grpc.ClientConnInterface) AuthwiseAuthorizeServiceClient {
	return &authwiseAuthorizeServiceClient{cc}
}

func (c *authwiseAuthorizeServiceClient) GetUserState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserStateResponse, error) {
	out := new(GetUserStateResponse)
	err := c.cc.Invoke(ctx, AuthwiseAuthorizeService_GetUserState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseAuthorizeServiceClient) UserSelectProvider(ctx context.Context, in *UserSelectProvider, opts ...grpc.CallOption) (*GetUserStateResponse, error) {
	out := new(GetUserStateResponse)
	err := c.cc.Invoke(ctx, AuthwiseAuthorizeService_UserSelectProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthwiseAuthorizeServiceServer is the server API for AuthwiseAuthorizeService service.
// All implementations should embed UnimplementedAuthwiseAuthorizeServiceServer
// for forward compatibility
type AuthwiseAuthorizeServiceServer interface {
	GetUserState(context.Context, *emptypb.Empty) (*GetUserStateResponse, error)
	UserSelectProvider(context.Context, *UserSelectProvider) (*GetUserStateResponse, error)
}

// UnimplementedAuthwiseAuthorizeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthwiseAuthorizeServiceServer struct {
}

func (UnimplementedAuthwiseAuthorizeServiceServer) GetUserState(context.Context, *emptypb.Empty) (*GetUserStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserState not implemented")
}
func (UnimplementedAuthwiseAuthorizeServiceServer) UserSelectProvider(context.Context, *UserSelectProvider) (*GetUserStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSelectProvider not implemented")
}

// UnsafeAuthwiseAuthorizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthwiseAuthorizeServiceServer will
// result in compilation errors.
type UnsafeAuthwiseAuthorizeServiceServer interface {
	mustEmbedUnimplementedAuthwiseAuthorizeServiceServer()
}

func RegisterAuthwiseAuthorizeServiceServer(s grpc.ServiceRegistrar, srv AuthwiseAuthorizeServiceServer) {
	s.RegisterService(&AuthwiseAuthorizeService_ServiceDesc, srv)
}

func _AuthwiseAuthorizeService_GetUserState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseAuthorizeServiceServer).GetUserState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseAuthorizeService_GetUserState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseAuthorizeServiceServer).GetUserState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseAuthorizeService_UserSelectProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSelectProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseAuthorizeServiceServer).UserSelectProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseAuthorizeService_UserSelectProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseAuthorizeServiceServer).UserSelectProvider(ctx, req.(*UserSelectProvider))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthwiseAuthorizeService_ServiceDesc is the grpc.ServiceDesc for AuthwiseAuthorizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthwiseAuthorizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authwise.authorize.v1alpha1.AuthwiseAuthorizeService",
	HandlerType: (*AuthwiseAuthorizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserState",
			Handler:    _AuthwiseAuthorizeService_GetUserState_Handler,
		},
		{
			MethodName: "UserSelectProvider",
			Handler:    _AuthwiseAuthorizeService_UserSelectProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authwise/authorize/v1alpha1/grpc.proto",
}
