// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: authwise/types/core/v1alpha1/config.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogLevel int32

const (
	LogLevel_LOG_LEVEL_UNSPECIFIED LogLevel = 0
	LogLevel_LOG_LEVEL_DISABLED    LogLevel = 1
	LogLevel_LOG_LEVEL_ERROR       LogLevel = 2
	LogLevel_LOG_LEVEL_WARN        LogLevel = 3
	LogLevel_LOG_LEVEL_INFO        LogLevel = 4
	LogLevel_LOG_LEVEL_DEBUG       LogLevel = 5
	LogLevel_LOG_LEVEL_TRACE       LogLevel = 6
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "LOG_LEVEL_DISABLED",
		2: "LOG_LEVEL_ERROR",
		3: "LOG_LEVEL_WARN",
		4: "LOG_LEVEL_INFO",
		5: "LOG_LEVEL_DEBUG",
		6: "LOG_LEVEL_TRACE",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"LOG_LEVEL_DISABLED":    1,
		"LOG_LEVEL_ERROR":       2,
		"LOG_LEVEL_WARN":        3,
		"LOG_LEVEL_INFO":        4,
		"LOG_LEVEL_DEBUG":       5,
		"LOG_LEVEL_TRACE":       6,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_authwise_types_core_v1alpha1_config_proto_enumTypes[0].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_authwise_types_core_v1alpha1_config_proto_enumTypes[0]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{0}
}

type CorsOptionsMode int32

const (
	CorsOptionsMode_CORS_OPTIONS_MODE_UNSPECIFIED CorsOptionsMode = 0
	CorsOptionsMode_CORS_OPTIONS_MODE_STRICT      CorsOptionsMode = 1
	CorsOptionsMode_CORS_OPTIONS_MODE_LAX         CorsOptionsMode = 2
)

// Enum value maps for CorsOptionsMode.
var (
	CorsOptionsMode_name = map[int32]string{
		0: "CORS_OPTIONS_MODE_UNSPECIFIED",
		1: "CORS_OPTIONS_MODE_STRICT",
		2: "CORS_OPTIONS_MODE_LAX",
	}
	CorsOptionsMode_value = map[string]int32{
		"CORS_OPTIONS_MODE_UNSPECIFIED": 0,
		"CORS_OPTIONS_MODE_STRICT":      1,
		"CORS_OPTIONS_MODE_LAX":         2,
	}
)

func (x CorsOptionsMode) Enum() *CorsOptionsMode {
	p := new(CorsOptionsMode)
	*p = x
	return p
}

func (x CorsOptionsMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CorsOptionsMode) Descriptor() protoreflect.EnumDescriptor {
	return file_authwise_types_core_v1alpha1_config_proto_enumTypes[1].Descriptor()
}

func (CorsOptionsMode) Type() protoreflect.EnumType {
	return &file_authwise_types_core_v1alpha1_config_proto_enumTypes[1]
}

func (x CorsOptionsMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CorsOptionsMode.Descriptor instead.
func (CorsOptionsMode) EnumDescriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{1}
}

type LoggingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel          LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=authwise.types.core.v1alpha1.LogLevel" json:"log_level,omitempty"`
	IncludeCaller     bool     `protobuf:"varint,2,opt,name=include_caller,json=includeCaller,proto3" json:"include_caller,omitempty"`
	IncludeStackTrace bool     `protobuf:"varint,3,opt,name=include_stack_trace,json=includeStackTrace,proto3" json:"include_stack_trace,omitempty"`
	SendToEventStream bool     `protobuf:"varint,4,opt,name=send_to_event_stream,json=sendToEventStream,proto3" json:"send_to_event_stream,omitempty"`
}

func (x *LoggingConfig) Reset() {
	*x = LoggingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingConfig) ProtoMessage() {}

func (x *LoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingConfig.ProtoReflect.Descriptor instead.
func (*LoggingConfig) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{0}
}

func (x *LoggingConfig) GetLogLevel() LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return LogLevel_LOG_LEVEL_UNSPECIFIED
}

func (x *LoggingConfig) GetIncludeCaller() bool {
	if x != nil {
		return x.IncludeCaller
	}
	return false
}

func (x *LoggingConfig) GetIncludeStackTrace() bool {
	if x != nil {
		return x.IncludeStackTrace
	}
	return false
}

func (x *LoggingConfig) GetSendToEventStream() bool {
	if x != nil {
		return x.SendToEventStream
	}
	return false
}

type CorsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionsMode    CorsOptionsMode `protobuf:"varint,1,opt,name=options_mode,json=optionsMode,proto3,enum=authwise.types.core.v1alpha1.CorsOptionsMode" json:"options_mode,omitempty"`
	AllowedHeaders []string        `protobuf:"bytes,2,rep,name=allowed_headers,json=allowedHeaders,proto3" json:"allowed_headers,omitempty"`
	AllowedOrigins []string        `protobuf:"bytes,3,rep,name=allowed_origins,json=allowedOrigins,proto3" json:"allowed_origins,omitempty"`
}

func (x *CorsConfig) Reset() {
	*x = CorsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorsConfig) ProtoMessage() {}

func (x *CorsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorsConfig.ProtoReflect.Descriptor instead.
func (*CorsConfig) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{1}
}

func (x *CorsConfig) GetOptionsMode() CorsOptionsMode {
	if x != nil {
		return x.OptionsMode
	}
	return CorsOptionsMode_CORS_OPTIONS_MODE_UNSPECIFIED
}

func (x *CorsConfig) GetAllowedHeaders() []string {
	if x != nil {
		return x.AllowedHeaders
	}
	return nil
}

func (x *CorsConfig) GetAllowedOrigins() []string {
	if x != nil {
		return x.AllowedOrigins
	}
	return nil
}

type InteractiveClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InteractionForwardUri    string             `protobuf:"bytes,1,opt,name=interaction_forward_uri,json=interactionForwardUri,proto3" json:"interaction_forward_uri,omitempty"`
	AllowedRedirectUris      []string           `protobuf:"bytes,2,rep,name=allowed_redirect_uris,json=allowedRedirectUris,proto3" json:"allowed_redirect_uris,omitempty"`
	AccessTokenExpireSeconds int32              `protobuf:"varint,3,opt,name=access_token_expire_seconds,json=accessTokenExpireSeconds,proto3" json:"access_token_expire_seconds,omitempty"`
	Cors                     *CorsConfig        `protobuf:"bytes,4,opt,name=cors,proto3" json:"cors,omitempty"`
	Logging                  *LoggingConfig     `protobuf:"bytes,5,opt,name=logging,proto3" json:"logging,omitempty"`
	FlowIntegrationConfig    *IntegrationConfig `protobuf:"bytes,6,opt,name=flow_integration_config,json=flowIntegrationConfig,proto3" json:"flow_integration_config,omitempty"`
}

func (x *InteractiveClientConfig) Reset() {
	*x = InteractiveClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractiveClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractiveClientConfig) ProtoMessage() {}

func (x *InteractiveClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractiveClientConfig.ProtoReflect.Descriptor instead.
func (*InteractiveClientConfig) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{2}
}

func (x *InteractiveClientConfig) GetInteractionForwardUri() string {
	if x != nil {
		return x.InteractionForwardUri
	}
	return ""
}

func (x *InteractiveClientConfig) GetAllowedRedirectUris() []string {
	if x != nil {
		return x.AllowedRedirectUris
	}
	return nil
}

func (x *InteractiveClientConfig) GetAccessTokenExpireSeconds() int32 {
	if x != nil {
		return x.AccessTokenExpireSeconds
	}
	return 0
}

func (x *InteractiveClientConfig) GetCors() *CorsConfig {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *InteractiveClientConfig) GetLogging() *LoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *InteractiveClientConfig) GetFlowIntegrationConfig() *IntegrationConfig {
	if x != nil {
		return x.FlowIntegrationConfig
	}
	return nil
}

// TODO - config split between this and issuer
type TenantConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InteractionForwardUri    string         `protobuf:"bytes,1,opt,name=interaction_forward_uri,json=interactionForwardUri,proto3" json:"interaction_forward_uri,omitempty"`
	AccessTokenExpireSeconds int32          `protobuf:"varint,2,opt,name=access_token_expire_seconds,json=accessTokenExpireSeconds,proto3" json:"access_token_expire_seconds,omitempty"`
	CookieDomain             string         `protobuf:"bytes,3,opt,name=cookie_domain,json=cookieDomain,proto3" json:"cookie_domain,omitempty"`
	Cors                     *CorsConfig    `protobuf:"bytes,4,opt,name=cors,proto3" json:"cors,omitempty"`
	Logging                  *LoggingConfig `protobuf:"bytes,5,opt,name=logging,proto3" json:"logging,omitempty"`
}

func (x *TenantConfig) Reset() {
	*x = TenantConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantConfig) ProtoMessage() {}

func (x *TenantConfig) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantConfig.ProtoReflect.Descriptor instead.
func (*TenantConfig) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{3}
}

func (x *TenantConfig) GetInteractionForwardUri() string {
	if x != nil {
		return x.InteractionForwardUri
	}
	return ""
}

func (x *TenantConfig) GetAccessTokenExpireSeconds() int32 {
	if x != nil {
		return x.AccessTokenExpireSeconds
	}
	return 0
}

func (x *TenantConfig) GetCookieDomain() string {
	if x != nil {
		return x.CookieDomain
	}
	return ""
}

func (x *TenantConfig) GetCors() *CorsConfig {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *TenantConfig) GetLogging() *LoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

type DomainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CookieDomain string `protobuf:"bytes,1,opt,name=cookie_domain,json=cookieDomain,proto3" json:"cookie_domain,omitempty"`
}

func (x *DomainConfig) Reset() {
	*x = DomainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainConfig) ProtoMessage() {}

func (x *DomainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainConfig.ProtoReflect.Descriptor instead.
func (*DomainConfig) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{4}
}

func (x *DomainConfig) GetCookieDomain() string {
	if x != nil {
		return x.CookieDomain
	}
	return ""
}

type IntegrationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointName string `protobuf:"bytes,1,opt,name=endpoint_name,json=endpointName,proto3" json:"endpoint_name,omitempty"`
}

func (x *IntegrationConfig) Reset() {
	*x = IntegrationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationConfig) ProtoMessage() {}

func (x *IntegrationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationConfig.ProtoReflect.Descriptor instead.
func (*IntegrationConfig) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{5}
}

func (x *IntegrationConfig) GetEndpointName() string {
	if x != nil {
		return x.EndpointName
	}
	return ""
}

// TODO - config split between this and issuer
type IssuerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalUiUrl            string         `protobuf:"bytes,1,opt,name=external_ui_url,json=externalUiUrl,proto3" json:"external_ui_url,omitempty"`
	AccessTokenExpireSeconds int32          `protobuf:"varint,2,opt,name=access_token_expire_seconds,json=accessTokenExpireSeconds,proto3" json:"access_token_expire_seconds,omitempty"`
	CookieDomain             string         `protobuf:"bytes,3,opt,name=cookie_domain,json=cookieDomain,proto3" json:"cookie_domain,omitempty"`
	Cors                     *CorsConfig    `protobuf:"bytes,4,opt,name=cors,proto3" json:"cors,omitempty"`
	Logging                  *LoggingConfig `protobuf:"bytes,5,opt,name=logging,proto3" json:"logging,omitempty"`
	// Types that are assignable to ProviderSelector:
	//
	//	*IssuerConfig_SingleRealmProviderSelector
	//	*IssuerConfig_MultiRealmProviderSelector
	//	*IssuerConfig_ExternalProviderSelector
	ProviderSelector      isIssuerConfig_ProviderSelector `protobuf_oneof:"provider_selector"`
	FlowIntegrationConfig *IntegrationConfig              `protobuf:"bytes,6,opt,name=flow_integration_config,json=flowIntegrationConfig,proto3" json:"flow_integration_config,omitempty"`
}

func (x *IssuerConfig) Reset() {
	*x = IssuerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuerConfig) ProtoMessage() {}

func (x *IssuerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuerConfig.ProtoReflect.Descriptor instead.
func (*IssuerConfig) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{6}
}

func (x *IssuerConfig) GetExternalUiUrl() string {
	if x != nil {
		return x.ExternalUiUrl
	}
	return ""
}

func (x *IssuerConfig) GetAccessTokenExpireSeconds() int32 {
	if x != nil {
		return x.AccessTokenExpireSeconds
	}
	return 0
}

func (x *IssuerConfig) GetCookieDomain() string {
	if x != nil {
		return x.CookieDomain
	}
	return ""
}

func (x *IssuerConfig) GetCors() *CorsConfig {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *IssuerConfig) GetLogging() *LoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (m *IssuerConfig) GetProviderSelector() isIssuerConfig_ProviderSelector {
	if m != nil {
		return m.ProviderSelector
	}
	return nil
}

func (x *IssuerConfig) GetSingleRealmProviderSelector() *SingleRealmProviderSelector {
	if x, ok := x.GetProviderSelector().(*IssuerConfig_SingleRealmProviderSelector); ok {
		return x.SingleRealmProviderSelector
	}
	return nil
}

func (x *IssuerConfig) GetMultiRealmProviderSelector() *MultiRealmProviderSelector {
	if x, ok := x.GetProviderSelector().(*IssuerConfig_MultiRealmProviderSelector); ok {
		return x.MultiRealmProviderSelector
	}
	return nil
}

func (x *IssuerConfig) GetExternalProviderSelector() *ExternalProviderSelector {
	if x, ok := x.GetProviderSelector().(*IssuerConfig_ExternalProviderSelector); ok {
		return x.ExternalProviderSelector
	}
	return nil
}

func (x *IssuerConfig) GetFlowIntegrationConfig() *IntegrationConfig {
	if x != nil {
		return x.FlowIntegrationConfig
	}
	return nil
}

type isIssuerConfig_ProviderSelector interface {
	isIssuerConfig_ProviderSelector()
}

type IssuerConfig_SingleRealmProviderSelector struct {
	SingleRealmProviderSelector *SingleRealmProviderSelector `protobuf:"bytes,101,opt,name=single_realm_provider_selector,json=singleRealmProviderSelector,proto3,oneof"`
}

type IssuerConfig_MultiRealmProviderSelector struct {
	MultiRealmProviderSelector *MultiRealmProviderSelector `protobuf:"bytes,102,opt,name=multi_realm_provider_selector,json=multiRealmProviderSelector,proto3,oneof"`
}

type IssuerConfig_ExternalProviderSelector struct {
	ExternalProviderSelector *ExternalProviderSelector `protobuf:"bytes,103,opt,name=external_provider_selector,json=externalProviderSelector,proto3,oneof"`
}

func (*IssuerConfig_SingleRealmProviderSelector) isIssuerConfig_ProviderSelector() {}

func (*IssuerConfig_MultiRealmProviderSelector) isIssuerConfig_ProviderSelector() {}

func (*IssuerConfig_ExternalProviderSelector) isIssuerConfig_ProviderSelector() {}

type SingleRealmProviderSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealmName string `protobuf:"bytes,1,opt,name=realm_name,json=realmName,proto3" json:"realm_name,omitempty"`
}

func (x *SingleRealmProviderSelector) Reset() {
	*x = SingleRealmProviderSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRealmProviderSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRealmProviderSelector) ProtoMessage() {}

func (x *SingleRealmProviderSelector) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRealmProviderSelector.ProtoReflect.Descriptor instead.
func (*SingleRealmProviderSelector) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{7}
}

func (x *SingleRealmProviderSelector) GetRealmName() string {
	if x != nil {
		return x.RealmName
	}
	return ""
}

type MultiRealmProviderSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealmNames []string `protobuf:"bytes,1,rep,name=realm_names,json=realmNames,proto3" json:"realm_names,omitempty"`
}

func (x *MultiRealmProviderSelector) Reset() {
	*x = MultiRealmProviderSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRealmProviderSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRealmProviderSelector) ProtoMessage() {}

func (x *MultiRealmProviderSelector) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRealmProviderSelector.ProtoReflect.Descriptor instead.
func (*MultiRealmProviderSelector) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{8}
}

func (x *MultiRealmProviderSelector) GetRealmNames() []string {
	if x != nil {
		return x.RealmNames
	}
	return nil
}

type ExternalProviderSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointName string `protobuf:"bytes,1,opt,name=endpoint_name,json=endpointName,proto3" json:"endpoint_name,omitempty"`
}

func (x *ExternalProviderSelector) Reset() {
	*x = ExternalProviderSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalProviderSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalProviderSelector) ProtoMessage() {}

func (x *ExternalProviderSelector) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalProviderSelector.ProtoReflect.Descriptor instead.
func (*ExternalProviderSelector) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{9}
}

func (x *ExternalProviderSelector) GetEndpointName() string {
	if x != nil {
		return x.EndpointName
	}
	return ""
}

type AuthorizationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeRoles       bool `protobuf:"varint,1,opt,name=include_roles,json=includeRoles,proto3" json:"include_roles,omitempty"`
	IncludePermissions bool `protobuf:"varint,2,opt,name=include_permissions,json=includePermissions,proto3" json:"include_permissions,omitempty"`
}

func (x *AuthorizationConfig) Reset() {
	*x = AuthorizationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationConfig) ProtoMessage() {}

func (x *AuthorizationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationConfig.ProtoReflect.Descriptor instead.
func (*AuthorizationConfig) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{10}
}

func (x *AuthorizationConfig) GetIncludeRoles() bool {
	if x != nil {
		return x.IncludeRoles
	}
	return false
}

func (x *AuthorizationConfig) GetIncludePermissions() bool {
	if x != nil {
		return x.IncludePermissions
	}
	return false
}

type ScopesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid        bool                 `protobuf:"varint,1,opt,name=openid,proto3" json:"openid,omitempty"`
	Authorization *AuthorizationConfig `protobuf:"bytes,2,opt,name=authorization,proto3" json:"authorization,omitempty"`
}

func (x *ScopesConfig) Reset() {
	*x = ScopesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopesConfig) ProtoMessage() {}

func (x *ScopesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopesConfig.ProtoReflect.Descriptor instead.
func (*ScopesConfig) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{11}
}

func (x *ScopesConfig) GetOpenid() bool {
	if x != nil {
		return x.Openid
	}
	return false
}

func (x *ScopesConfig) GetAuthorization() *AuthorizationConfig {
	if x != nil {
		return x.Authorization
	}
	return nil
}

type AudienceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InteractionForwardUri    string             `protobuf:"bytes,1,opt,name=interaction_forward_uri,json=interactionForwardUri,proto3" json:"interaction_forward_uri,omitempty"`
	AccessTokenExpireSeconds int32              `protobuf:"varint,2,opt,name=access_token_expire_seconds,json=accessTokenExpireSeconds,proto3" json:"access_token_expire_seconds,omitempty"`
	Scopes                   *ScopesConfig      `protobuf:"bytes,3,opt,name=scopes,proto3" json:"scopes,omitempty"`
	Cors                     *CorsConfig        `protobuf:"bytes,4,opt,name=cors,proto3" json:"cors,omitempty"`
	Logging                  *LoggingConfig     `protobuf:"bytes,5,opt,name=logging,proto3" json:"logging,omitempty"`
	FlowIntegrationConfig    *IntegrationConfig `protobuf:"bytes,6,opt,name=flow_integration_config,json=flowIntegrationConfig,proto3" json:"flow_integration_config,omitempty"`
}

func (x *AudienceConfig) Reset() {
	*x = AudienceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceConfig) ProtoMessage() {}

func (x *AudienceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceConfig.ProtoReflect.Descriptor instead.
func (*AudienceConfig) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{12}
}

func (x *AudienceConfig) GetInteractionForwardUri() string {
	if x != nil {
		return x.InteractionForwardUri
	}
	return ""
}

func (x *AudienceConfig) GetAccessTokenExpireSeconds() int32 {
	if x != nil {
		return x.AccessTokenExpireSeconds
	}
	return 0
}

func (x *AudienceConfig) GetScopes() *ScopesConfig {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *AudienceConfig) GetCors() *CorsConfig {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *AudienceConfig) GetLogging() *LoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *AudienceConfig) GetFlowIntegrationConfig() *IntegrationConfig {
	if x != nil {
		return x.FlowIntegrationConfig
	}
	return nil
}

type ProviderAuthwise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer   string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// In case you need to get the token from a different server side address
	InternalIssuer string `protobuf:"bytes,3,opt,name=internal_issuer,json=internalIssuer,proto3" json:"internal_issuer,omitempty"`
}

func (x *ProviderAuthwise) Reset() {
	*x = ProviderAuthwise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderAuthwise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderAuthwise) ProtoMessage() {}

func (x *ProviderAuthwise) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderAuthwise.ProtoReflect.Descriptor instead.
func (*ProviderAuthwise) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{13}
}

func (x *ProviderAuthwise) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *ProviderAuthwise) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProviderAuthwise) GetInternalIssuer() string {
	if x != nil {
		return x.InternalIssuer
	}
	return ""
}

type ProviderUsernamePassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PasswordHashType     string                     `protobuf:"bytes,2,opt,name=password_hash_type,json=passwordHashType,proto3" json:"password_hash_type,omitempty"`
	PasswordValidators   []*PasswordValidatorConfig `protobuf:"bytes,3,rep,name=password_validators,json=passwordValidators,proto3" json:"password_validators,omitempty"`
	AllowSignup          bool                       `protobuf:"varint,4,opt,name=allow_signup,json=allowSignup,proto3" json:"allow_signup,omitempty"`
	ExternalEndpointName string                     `protobuf:"bytes,5,opt,name=external_endpoint_name,json=externalEndpointName,proto3" json:"external_endpoint_name,omitempty"`
}

func (x *ProviderUsernamePassword) Reset() {
	*x = ProviderUsernamePassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderUsernamePassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderUsernamePassword) ProtoMessage() {}

func (x *ProviderUsernamePassword) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderUsernamePassword.ProtoReflect.Descriptor instead.
func (*ProviderUsernamePassword) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{14}
}

func (x *ProviderUsernamePassword) GetPasswordHashType() string {
	if x != nil {
		return x.PasswordHashType
	}
	return ""
}

func (x *ProviderUsernamePassword) GetPasswordValidators() []*PasswordValidatorConfig {
	if x != nil {
		return x.PasswordValidators
	}
	return nil
}

func (x *ProviderUsernamePassword) GetAllowSignup() bool {
	if x != nil {
		return x.AllowSignup
	}
	return false
}

func (x *ProviderUsernamePassword) GetExternalEndpointName() string {
	if x != nil {
		return x.ExternalEndpointName
	}
	return ""
}

type ProviderMicrosoft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope        string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ClientId     string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	PromptStyle  string `protobuf:"bytes,4,opt,name=prompt_style,json=promptStyle,proto3" json:"prompt_style,omitempty"`
	Tenant       string `protobuf:"bytes,5,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *ProviderMicrosoft) Reset() {
	*x = ProviderMicrosoft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderMicrosoft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderMicrosoft) ProtoMessage() {}

func (x *ProviderMicrosoft) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderMicrosoft.ProtoReflect.Descriptor instead.
func (*ProviderMicrosoft) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{15}
}

func (x *ProviderMicrosoft) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProviderMicrosoft) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProviderMicrosoft) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ProviderMicrosoft) GetPromptStyle() string {
	if x != nil {
		return x.PromptStyle
	}
	return ""
}

func (x *ProviderMicrosoft) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type ProviderGoogle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Scope        string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	Prompt       string `protobuf:"bytes,4,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *ProviderGoogle) Reset() {
	*x = ProviderGoogle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderGoogle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderGoogle) ProtoMessage() {}

func (x *ProviderGoogle) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderGoogle.ProtoReflect.Descriptor instead.
func (*ProviderGoogle) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{16}
}

func (x *ProviderGoogle) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProviderGoogle) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ProviderGoogle) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProviderGoogle) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type ProviderGitHub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	AllowSignup  bool   `protobuf:"varint,3,opt,name=allow_signup,json=allowSignup,proto3" json:"allow_signup,omitempty"`
	Prompt       string `protobuf:"bytes,4,opt,name=prompt,proto3" json:"prompt,omitempty"`
	Display      string `protobuf:"bytes,5,opt,name=display,proto3" json:"display,omitempty"`
	Scope        string `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ProviderGitHub) Reset() {
	*x = ProviderGitHub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderGitHub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderGitHub) ProtoMessage() {}

func (x *ProviderGitHub) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderGitHub.ProtoReflect.Descriptor instead.
func (*ProviderGitHub) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{17}
}

func (x *ProviderGitHub) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProviderGitHub) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ProviderGitHub) GetAllowSignup() bool {
	if x != nil {
		return x.AllowSignup
	}
	return false
}

func (x *ProviderGitHub) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *ProviderGitHub) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *ProviderGitHub) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ProviderLinkedIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId             string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret         string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Scope                string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	IncludeGrantedScopes string `protobuf:"bytes,4,opt,name=include_granted_scopes,json=includeGrantedScopes,proto3" json:"include_granted_scopes,omitempty"`
}

func (x *ProviderLinkedIn) Reset() {
	*x = ProviderLinkedIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderLinkedIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderLinkedIn) ProtoMessage() {}

func (x *ProviderLinkedIn) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderLinkedIn.ProtoReflect.Descriptor instead.
func (*ProviderLinkedIn) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{18}
}

func (x *ProviderLinkedIn) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProviderLinkedIn) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ProviderLinkedIn) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProviderLinkedIn) GetIncludeGrantedScopes() string {
	if x != nil {
		return x.IncludeGrantedScopes
	}
	return ""
}

type ProviderFacebook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Scope        string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	UserFields   string `protobuf:"bytes,4,opt,name=user_fields,json=userFields,proto3" json:"user_fields,omitempty"`
}

func (x *ProviderFacebook) Reset() {
	*x = ProviderFacebook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderFacebook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderFacebook) ProtoMessage() {}

func (x *ProviderFacebook) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderFacebook.ProtoReflect.Descriptor instead.
func (*ProviderFacebook) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{19}
}

func (x *ProviderFacebook) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProviderFacebook) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ProviderFacebook) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProviderFacebook) GetUserFields() string {
	if x != nil {
		return x.UserFields
	}
	return ""
}

type ProviderDropbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId             string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret         string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Scope                string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	IncludeGrantedScopes string `protobuf:"bytes,4,opt,name=include_granted_scopes,json=includeGrantedScopes,proto3" json:"include_granted_scopes,omitempty"`
}

func (x *ProviderDropbox) Reset() {
	*x = ProviderDropbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderDropbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderDropbox) ProtoMessage() {}

func (x *ProviderDropbox) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderDropbox.ProtoReflect.Descriptor instead.
func (*ProviderDropbox) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{20}
}

func (x *ProviderDropbox) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProviderDropbox) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ProviderDropbox) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProviderDropbox) GetIncludeGrantedScopes() string {
	if x != nil {
		return x.IncludeGrantedScopes
	}
	return ""
}

type ProviderOkta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Scope        string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	TenantUrl    string `protobuf:"bytes,4,opt,name=tenant_url,json=tenantUrl,proto3" json:"tenant_url,omitempty"`
}

func (x *ProviderOkta) Reset() {
	*x = ProviderOkta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderOkta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderOkta) ProtoMessage() {}

func (x *ProviderOkta) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderOkta.ProtoReflect.Descriptor instead.
func (*ProviderOkta) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{21}
}

func (x *ProviderOkta) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProviderOkta) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ProviderOkta) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProviderOkta) GetTenantUrl() string {
	if x != nil {
		return x.TenantUrl
	}
	return ""
}

type ProviderAuth0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Scope        string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	TenantUrl    string `protobuf:"bytes,4,opt,name=tenant_url,json=tenantUrl,proto3" json:"tenant_url,omitempty"`
}

func (x *ProviderAuth0) Reset() {
	*x = ProviderAuth0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderAuth0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderAuth0) ProtoMessage() {}

func (x *ProviderAuth0) ProtoReflect() protoreflect.Message {
	mi := &file_authwise_types_core_v1alpha1_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderAuth0.ProtoReflect.Descriptor instead.
func (*ProviderAuth0) Descriptor() ([]byte, []int) {
	return file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP(), []int{22}
}

func (x *ProviderAuth0) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProviderAuth0) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ProviderAuth0) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProviderAuth0) GetTenantUrl() string {
	if x != nil {
		return x.TenantUrl
	}
	return ""
}

var File_authwise_types_core_v1alpha1_config_proto protoreflect.FileDescriptor

var file_authwise_types_core_v1alpha1_config_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x61, 0x75, 0x74,
	0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x2b, 0x61, 0x75, 0x74, 0x68, 0x77,
	0x69, 0x73, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdc, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x43, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x6e,
	0x64, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xb0,
	0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a,
	0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x73, 0x22, 0xb2, 0x03, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a,
	0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x55, 0x72, 0x69, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x67, 0x0a,
	0x17, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x15, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xaf, 0x02, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x55, 0x72, 0x69, 0x12,
	0x3d, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x63, 0x6f, 0x72,
	0x73, 0x12, 0x45, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x33, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x38, 0x0a,
	0x11, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x06, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x55, 0x72, 0x6c,
	0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x63, 0x6f,
	0x72, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x1e, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x1b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x7d, 0x0a, 0x1d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x76, 0x0a, 0x1a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x67, 0x0a, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x13, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x3c, 0x0a, 0x1b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x6d,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x3d, 0x0a, 0x1a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x3f,
	0x0a, 0x18, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x6b, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7f, 0x0a, 0x0c,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x03,
	0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x55, 0x72, 0x69, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x63,
	0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x77, 0x69, 0x73, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x67, 0x0a, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x15, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x70, 0x0a, 0x10, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x89, 0x02, 0x0a, 0x18,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x67, 0x6e, 0x75,
	0x70, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x22, 0x80, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x44, 0x72, 0x6f, 0x70, 0x62, 0x6f, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4f, 0x6b, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x86,
	0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x30,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x2a, 0xa4, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x06, 0x2a, 0x6d,
	0x0a, 0x0f, 0x43, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x52, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x52, 0x53, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x52, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x58, 0x10, 0x02, 0x42, 0x8b, 0x02,
	0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69,
	0x73, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x54, 0x43,
	0xaa, 0x02, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca,
	0x02, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02,
	0x28, 0x41, 0x75, 0x74, 0x68, 0x77, 0x69, 0x73, 0x65, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c,
	0x43, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1f, 0x41, 0x75, 0x74, 0x68,
	0x77, 0x69, 0x73, 0x65, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x72,
	0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_authwise_types_core_v1alpha1_config_proto_rawDescOnce sync.Once
	file_authwise_types_core_v1alpha1_config_proto_rawDescData = file_authwise_types_core_v1alpha1_config_proto_rawDesc
)

func file_authwise_types_core_v1alpha1_config_proto_rawDescGZIP() []byte {
	file_authwise_types_core_v1alpha1_config_proto_rawDescOnce.Do(func() {
		file_authwise_types_core_v1alpha1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_authwise_types_core_v1alpha1_config_proto_rawDescData)
	})
	return file_authwise_types_core_v1alpha1_config_proto_rawDescData
}

var file_authwise_types_core_v1alpha1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_authwise_types_core_v1alpha1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_authwise_types_core_v1alpha1_config_proto_goTypes = []interface{}{
	(LogLevel)(0),                       // 0: authwise.types.core.v1alpha1.LogLevel
	(CorsOptionsMode)(0),                // 1: authwise.types.core.v1alpha1.CorsOptionsMode
	(*LoggingConfig)(nil),               // 2: authwise.types.core.v1alpha1.LoggingConfig
	(*CorsConfig)(nil),                  // 3: authwise.types.core.v1alpha1.CorsConfig
	(*InteractiveClientConfig)(nil),     // 4: authwise.types.core.v1alpha1.InteractiveClientConfig
	(*TenantConfig)(nil),                // 5: authwise.types.core.v1alpha1.TenantConfig
	(*DomainConfig)(nil),                // 6: authwise.types.core.v1alpha1.DomainConfig
	(*IntegrationConfig)(nil),           // 7: authwise.types.core.v1alpha1.IntegrationConfig
	(*IssuerConfig)(nil),                // 8: authwise.types.core.v1alpha1.IssuerConfig
	(*SingleRealmProviderSelector)(nil), // 9: authwise.types.core.v1alpha1.SingleRealmProviderSelector
	(*MultiRealmProviderSelector)(nil),  // 10: authwise.types.core.v1alpha1.MultiRealmProviderSelector
	(*ExternalProviderSelector)(nil),    // 11: authwise.types.core.v1alpha1.ExternalProviderSelector
	(*AuthorizationConfig)(nil),         // 12: authwise.types.core.v1alpha1.AuthorizationConfig
	(*ScopesConfig)(nil),                // 13: authwise.types.core.v1alpha1.ScopesConfig
	(*AudienceConfig)(nil),              // 14: authwise.types.core.v1alpha1.AudienceConfig
	(*ProviderAuthwise)(nil),            // 15: authwise.types.core.v1alpha1.ProviderAuthwise
	(*ProviderUsernamePassword)(nil),    // 16: authwise.types.core.v1alpha1.ProviderUsernamePassword
	(*ProviderMicrosoft)(nil),           // 17: authwise.types.core.v1alpha1.ProviderMicrosoft
	(*ProviderGoogle)(nil),              // 18: authwise.types.core.v1alpha1.ProviderGoogle
	(*ProviderGitHub)(nil),              // 19: authwise.types.core.v1alpha1.ProviderGitHub
	(*ProviderLinkedIn)(nil),            // 20: authwise.types.core.v1alpha1.ProviderLinkedIn
	(*ProviderFacebook)(nil),            // 21: authwise.types.core.v1alpha1.ProviderFacebook
	(*ProviderDropbox)(nil),             // 22: authwise.types.core.v1alpha1.ProviderDropbox
	(*ProviderOkta)(nil),                // 23: authwise.types.core.v1alpha1.ProviderOkta
	(*ProviderAuth0)(nil),               // 24: authwise.types.core.v1alpha1.ProviderAuth0
	(*PasswordValidatorConfig)(nil),     // 25: authwise.types.core.v1alpha1.PasswordValidatorConfig
}
var file_authwise_types_core_v1alpha1_config_proto_depIdxs = []int32{
	0,  // 0: authwise.types.core.v1alpha1.LoggingConfig.log_level:type_name -> authwise.types.core.v1alpha1.LogLevel
	1,  // 1: authwise.types.core.v1alpha1.CorsConfig.options_mode:type_name -> authwise.types.core.v1alpha1.CorsOptionsMode
	3,  // 2: authwise.types.core.v1alpha1.InteractiveClientConfig.cors:type_name -> authwise.types.core.v1alpha1.CorsConfig
	2,  // 3: authwise.types.core.v1alpha1.InteractiveClientConfig.logging:type_name -> authwise.types.core.v1alpha1.LoggingConfig
	7,  // 4: authwise.types.core.v1alpha1.InteractiveClientConfig.flow_integration_config:type_name -> authwise.types.core.v1alpha1.IntegrationConfig
	3,  // 5: authwise.types.core.v1alpha1.TenantConfig.cors:type_name -> authwise.types.core.v1alpha1.CorsConfig
	2,  // 6: authwise.types.core.v1alpha1.TenantConfig.logging:type_name -> authwise.types.core.v1alpha1.LoggingConfig
	3,  // 7: authwise.types.core.v1alpha1.IssuerConfig.cors:type_name -> authwise.types.core.v1alpha1.CorsConfig
	2,  // 8: authwise.types.core.v1alpha1.IssuerConfig.logging:type_name -> authwise.types.core.v1alpha1.LoggingConfig
	9,  // 9: authwise.types.core.v1alpha1.IssuerConfig.single_realm_provider_selector:type_name -> authwise.types.core.v1alpha1.SingleRealmProviderSelector
	10, // 10: authwise.types.core.v1alpha1.IssuerConfig.multi_realm_provider_selector:type_name -> authwise.types.core.v1alpha1.MultiRealmProviderSelector
	11, // 11: authwise.types.core.v1alpha1.IssuerConfig.external_provider_selector:type_name -> authwise.types.core.v1alpha1.ExternalProviderSelector
	7,  // 12: authwise.types.core.v1alpha1.IssuerConfig.flow_integration_config:type_name -> authwise.types.core.v1alpha1.IntegrationConfig
	12, // 13: authwise.types.core.v1alpha1.ScopesConfig.authorization:type_name -> authwise.types.core.v1alpha1.AuthorizationConfig
	13, // 14: authwise.types.core.v1alpha1.AudienceConfig.scopes:type_name -> authwise.types.core.v1alpha1.ScopesConfig
	3,  // 15: authwise.types.core.v1alpha1.AudienceConfig.cors:type_name -> authwise.types.core.v1alpha1.CorsConfig
	2,  // 16: authwise.types.core.v1alpha1.AudienceConfig.logging:type_name -> authwise.types.core.v1alpha1.LoggingConfig
	7,  // 17: authwise.types.core.v1alpha1.AudienceConfig.flow_integration_config:type_name -> authwise.types.core.v1alpha1.IntegrationConfig
	25, // 18: authwise.types.core.v1alpha1.ProviderUsernamePassword.password_validators:type_name -> authwise.types.core.v1alpha1.PasswordValidatorConfig
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_authwise_types_core_v1alpha1_config_proto_init() }
func file_authwise_types_core_v1alpha1_config_proto_init() {
	if File_authwise_types_core_v1alpha1_config_proto != nil {
		return
	}
	file_authwise_types_core_v1alpha1_password_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractiveClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRealmProviderSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRealmProviderSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalProviderSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderAuthwise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderUsernamePassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderMicrosoft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderGoogle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderGitHub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderLinkedIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderFacebook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderDropbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderOkta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authwise_types_core_v1alpha1_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderAuth0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_authwise_types_core_v1alpha1_config_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*IssuerConfig_SingleRealmProviderSelector)(nil),
		(*IssuerConfig_MultiRealmProviderSelector)(nil),
		(*IssuerConfig_ExternalProviderSelector)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_authwise_types_core_v1alpha1_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_authwise_types_core_v1alpha1_config_proto_goTypes,
		DependencyIndexes: file_authwise_types_core_v1alpha1_config_proto_depIdxs,
		EnumInfos:         file_authwise_types_core_v1alpha1_config_proto_enumTypes,
		MessageInfos:      file_authwise_types_core_v1alpha1_config_proto_msgTypes,
	}.Build()
	File_authwise_types_core_v1alpha1_config_proto = out.File
	file_authwise_types_core_v1alpha1_config_proto_rawDesc = nil
	file_authwise_types_core_v1alpha1_config_proto_goTypes = nil
	file_authwise_types_core_v1alpha1_config_proto_depIdxs = nil
}
