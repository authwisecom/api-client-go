// GENERATED BY go:generate. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: authwise/identity/v1alpha1/grpc.proto

package v1alpha1

import (
	context "context"
	v1alpha1 "github.com/authwisecom/api-client-go/authwise/types/core/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthwiseIdentityService_GetTenant_FullMethodName                   = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetTenant"
	AuthwiseIdentityService_ListTenants_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListTenants"
	AuthwiseIdentityService_CreateTenant_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateTenant"
	AuthwiseIdentityService_UpdateTenant_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateTenant"
	AuthwiseIdentityService_PatchTenant_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchTenant"
	AuthwiseIdentityService_DeleteTenant_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteTenant"
	AuthwiseIdentityService_GetDomain_FullMethodName                   = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetDomain"
	AuthwiseIdentityService_ListDomains_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListDomains"
	AuthwiseIdentityService_CreateDomain_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateDomain"
	AuthwiseIdentityService_UpdateDomain_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateDomain"
	AuthwiseIdentityService_PatchDomain_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchDomain"
	AuthwiseIdentityService_DeleteDomain_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteDomain"
	AuthwiseIdentityService_GetIssuer_FullMethodName                   = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetIssuer"
	AuthwiseIdentityService_ListIssuers_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListIssuers"
	AuthwiseIdentityService_CreateIssuer_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateIssuer"
	AuthwiseIdentityService_UpdateIssuer_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateIssuer"
	AuthwiseIdentityService_PatchIssuer_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchIssuer"
	AuthwiseIdentityService_DeleteIssuer_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteIssuer"
	AuthwiseIdentityService_GetAsset_FullMethodName                    = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetAsset"
	AuthwiseIdentityService_ListAssets_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListAssets"
	AuthwiseIdentityService_CreateAsset_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateAsset"
	AuthwiseIdentityService_UpdateAsset_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateAsset"
	AuthwiseIdentityService_PatchAsset_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchAsset"
	AuthwiseIdentityService_DeleteAsset_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteAsset"
	AuthwiseIdentityService_UploadAsset_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UploadAsset"
	AuthwiseIdentityService_DownloadAsset_FullMethodName               = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DownloadAsset"
	AuthwiseIdentityService_RemoveAsset_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/RemoveAsset"
	AuthwiseIdentityService_GetSecret_FullMethodName                   = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetSecret"
	AuthwiseIdentityService_ListSecrets_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListSecrets"
	AuthwiseIdentityService_CreateSecret_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateSecret"
	AuthwiseIdentityService_UpdateSecret_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateSecret"
	AuthwiseIdentityService_PatchSecret_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchSecret"
	AuthwiseIdentityService_DeleteSecret_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteSecret"
	AuthwiseIdentityService_GetRealm_FullMethodName                    = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetRealm"
	AuthwiseIdentityService_ListRealms_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListRealms"
	AuthwiseIdentityService_CreateRealm_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateRealm"
	AuthwiseIdentityService_UpdateRealm_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateRealm"
	AuthwiseIdentityService_PatchRealm_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchRealm"
	AuthwiseIdentityService_DeleteRealm_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteRealm"
	AuthwiseIdentityService_GetUser_FullMethodName                     = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetUser"
	AuthwiseIdentityService_ListUsers_FullMethodName                   = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListUsers"
	AuthwiseIdentityService_CreateUser_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateUser"
	AuthwiseIdentityService_UpdateUser_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateUser"
	AuthwiseIdentityService_PatchUser_FullMethodName                   = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchUser"
	AuthwiseIdentityService_DeleteUser_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteUser"
	AuthwiseIdentityService_UserSearchPredicates_FullMethodName        = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UserSearchPredicates"
	AuthwiseIdentityService_SearchUsers_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/SearchUsers"
	AuthwiseIdentityService_ListRolesByUser_FullMethodName             = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListRolesByUser"
	AuthwiseIdentityService_AssociateRolesToUser_FullMethodName        = "/authwise.identity.v1alpha1.AuthwiseIdentityService/AssociateRolesToUser"
	AuthwiseIdentityService_GetProvider_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetProvider"
	AuthwiseIdentityService_ListProviders_FullMethodName               = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListProviders"
	AuthwiseIdentityService_CreateProvider_FullMethodName              = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateProvider"
	AuthwiseIdentityService_UpdateProvider_FullMethodName              = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateProvider"
	AuthwiseIdentityService_PatchProvider_FullMethodName               = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchProvider"
	AuthwiseIdentityService_DeleteProvider_FullMethodName              = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteProvider"
	AuthwiseIdentityService_GetClient_FullMethodName                   = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetClient"
	AuthwiseIdentityService_ListClients_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListClients"
	AuthwiseIdentityService_CreateClient_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateClient"
	AuthwiseIdentityService_UpdateClient_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateClient"
	AuthwiseIdentityService_PatchClient_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchClient"
	AuthwiseIdentityService_DeleteClient_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteClient"
	AuthwiseIdentityService_GetRole_FullMethodName                     = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetRole"
	AuthwiseIdentityService_ListRoles_FullMethodName                   = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListRoles"
	AuthwiseIdentityService_CreateRole_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateRole"
	AuthwiseIdentityService_UpdateRole_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateRole"
	AuthwiseIdentityService_PatchRole_FullMethodName                   = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchRole"
	AuthwiseIdentityService_DeleteRole_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteRole"
	AuthwiseIdentityService_ListPermissionsByRole_FullMethodName       = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListPermissionsByRole"
	AuthwiseIdentityService_AssociatePermissionsToRole_FullMethodName  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/AssociatePermissionsToRole"
	AuthwiseIdentityService_GetPermission_FullMethodName               = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetPermission"
	AuthwiseIdentityService_ListPermissions_FullMethodName             = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListPermissions"
	AuthwiseIdentityService_CreatePermission_FullMethodName            = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreatePermission"
	AuthwiseIdentityService_UpdatePermission_FullMethodName            = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdatePermission"
	AuthwiseIdentityService_PatchPermission_FullMethodName             = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchPermission"
	AuthwiseIdentityService_DeletePermission_FullMethodName            = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeletePermission"
	AuthwiseIdentityService_GetAudience_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetAudience"
	AuthwiseIdentityService_ListAudiences_FullMethodName               = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListAudiences"
	AuthwiseIdentityService_CreateAudience_FullMethodName              = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateAudience"
	AuthwiseIdentityService_UpdateAudience_FullMethodName              = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateAudience"
	AuthwiseIdentityService_PatchAudience_FullMethodName               = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchAudience"
	AuthwiseIdentityService_DeleteAudience_FullMethodName              = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteAudience"
	AuthwiseIdentityService_GetScope_FullMethodName                    = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetScope"
	AuthwiseIdentityService_ListScopes_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListScopes"
	AuthwiseIdentityService_CreateScope_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateScope"
	AuthwiseIdentityService_UpdateScope_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateScope"
	AuthwiseIdentityService_PatchScope_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchScope"
	AuthwiseIdentityService_DeleteScope_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteScope"
	AuthwiseIdentityService_ListPermissionsByScope_FullMethodName      = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListPermissionsByScope"
	AuthwiseIdentityService_AssociatePermissionsToScope_FullMethodName = "/authwise.identity.v1alpha1.AuthwiseIdentityService/AssociatePermissionsToScope"
	AuthwiseIdentityService_GetEvent_FullMethodName                    = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetEvent"
	AuthwiseIdentityService_ListEvents_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListEvents"
	AuthwiseIdentityService_EventSearchPredicates_FullMethodName       = "/authwise.identity.v1alpha1.AuthwiseIdentityService/EventSearchPredicates"
	AuthwiseIdentityService_SearchEvents_FullMethodName                = "/authwise.identity.v1alpha1.AuthwiseIdentityService/SearchEvents"
	AuthwiseIdentityService_GetTheme_FullMethodName                    = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetTheme"
	AuthwiseIdentityService_ListThemes_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListThemes"
	AuthwiseIdentityService_CreateTheme_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateTheme"
	AuthwiseIdentityService_UpdateTheme_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateTheme"
	AuthwiseIdentityService_PatchTheme_FullMethodName                  = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchTheme"
	AuthwiseIdentityService_DeleteTheme_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteTheme"
	AuthwiseIdentityService_GetAppearanceProfile_FullMethodName        = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetAppearanceProfile"
	AuthwiseIdentityService_ListAppearanceProfiles_FullMethodName      = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListAppearanceProfiles"
	AuthwiseIdentityService_CreateAppearanceProfile_FullMethodName     = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateAppearanceProfile"
	AuthwiseIdentityService_UpdateAppearanceProfile_FullMethodName     = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateAppearanceProfile"
	AuthwiseIdentityService_PatchAppearanceProfile_FullMethodName      = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchAppearanceProfile"
	AuthwiseIdentityService_DeleteAppearanceProfile_FullMethodName     = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteAppearanceProfile"
	AuthwiseIdentityService_GetEndpoint_FullMethodName                 = "/authwise.identity.v1alpha1.AuthwiseIdentityService/GetEndpoint"
	AuthwiseIdentityService_ListEndpoints_FullMethodName               = "/authwise.identity.v1alpha1.AuthwiseIdentityService/ListEndpoints"
	AuthwiseIdentityService_CreateEndpoint_FullMethodName              = "/authwise.identity.v1alpha1.AuthwiseIdentityService/CreateEndpoint"
	AuthwiseIdentityService_UpdateEndpoint_FullMethodName              = "/authwise.identity.v1alpha1.AuthwiseIdentityService/UpdateEndpoint"
	AuthwiseIdentityService_PatchEndpoint_FullMethodName               = "/authwise.identity.v1alpha1.AuthwiseIdentityService/PatchEndpoint"
	AuthwiseIdentityService_DeleteEndpoint_FullMethodName              = "/authwise.identity.v1alpha1.AuthwiseIdentityService/DeleteEndpoint"
)

// AuthwiseIdentityServiceClient is the client API for AuthwiseIdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthwiseIdentityServiceClient interface {
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error)
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error)
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error)
	PatchTenant(ctx context.Context, in *PatchTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error)
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*v1alpha1.Domain, error)
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*v1alpha1.Domain, error)
	UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*v1alpha1.Domain, error)
	PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*v1alpha1.Domain, error)
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetIssuer(ctx context.Context, in *GetIssuerRequest, opts ...grpc.CallOption) (*v1alpha1.Issuer, error)
	ListIssuers(ctx context.Context, in *ListIssuersRequest, opts ...grpc.CallOption) (*ListIssuersResponse, error)
	CreateIssuer(ctx context.Context, in *CreateIssuerRequest, opts ...grpc.CallOption) (*v1alpha1.Issuer, error)
	UpdateIssuer(ctx context.Context, in *UpdateIssuerRequest, opts ...grpc.CallOption) (*v1alpha1.Issuer, error)
	PatchIssuer(ctx context.Context, in *PatchIssuerRequest, opts ...grpc.CallOption) (*v1alpha1.Issuer, error)
	DeleteIssuer(ctx context.Context, in *DeleteIssuerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*v1alpha1.Asset, error)
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*v1alpha1.Asset, error)
	UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*v1alpha1.Asset, error)
	PatchAsset(ctx context.Context, in *PatchAssetRequest, opts ...grpc.CallOption) (*v1alpha1.Asset, error)
	DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UploadAsset(ctx context.Context, opts ...grpc.CallOption) (AuthwiseIdentityService_UploadAssetClient, error)
	DownloadAsset(ctx context.Context, in *DownloadAssetRequest, opts ...grpc.CallOption) (AuthwiseIdentityService_DownloadAssetClient, error)
	RemoveAsset(ctx context.Context, in *RemoveAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*v1alpha1.Secret, error)
	ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error)
	CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*v1alpha1.Secret, error)
	UpdateSecret(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*v1alpha1.Secret, error)
	PatchSecret(ctx context.Context, in *PatchSecretRequest, opts ...grpc.CallOption) (*v1alpha1.Secret, error)
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRealm(ctx context.Context, in *GetRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error)
	ListRealms(ctx context.Context, in *ListRealmsRequest, opts ...grpc.CallOption) (*ListRealmsResponse, error)
	CreateRealm(ctx context.Context, in *CreateRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error)
	UpdateRealm(ctx context.Context, in *UpdateRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error)
	PatchRealm(ctx context.Context, in *PatchRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error)
	DeleteRealm(ctx context.Context, in *DeleteRealmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error)
	PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UserSearchPredicates(ctx context.Context, in *UserSearchPredicatesRequest, opts ...grpc.CallOption) (*UserSearchPredicatesResponse, error)
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	ListRolesByUser(ctx context.Context, in *ListRolesByUserRequest, opts ...grpc.CallOption) (*ListRolesByUserResponse, error)
	AssociateRolesToUser(ctx context.Context, in *AssociateRolesToUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error)
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	CreateProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error)
	UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error)
	PatchProvider(ctx context.Context, in *PatchProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error)
	DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error)
	ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error)
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error)
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error)
	PatchClient(ctx context.Context, in *PatchClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error)
	DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error)
	PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPermissionsByRole(ctx context.Context, in *ListPermissionsByRoleRequest, opts ...grpc.CallOption) (*ListPermissionsByRoleResponse, error)
	AssociatePermissionsToRole(ctx context.Context, in *AssociatePermissionsToRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error)
	ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error)
	PatchPermission(ctx context.Context, in *PatchPermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error)
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAudience(ctx context.Context, in *GetAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error)
	ListAudiences(ctx context.Context, in *ListAudiencesRequest, opts ...grpc.CallOption) (*ListAudiencesResponse, error)
	CreateAudience(ctx context.Context, in *CreateAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error)
	UpdateAudience(ctx context.Context, in *UpdateAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error)
	PatchAudience(ctx context.Context, in *PatchAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error)
	DeleteAudience(ctx context.Context, in *DeleteAudienceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetScope(ctx context.Context, in *GetScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error)
	ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*ListScopesResponse, error)
	CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error)
	UpdateScope(ctx context.Context, in *UpdateScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error)
	PatchScope(ctx context.Context, in *PatchScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error)
	DeleteScope(ctx context.Context, in *DeleteScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPermissionsByScope(ctx context.Context, in *ListPermissionsByScopeRequest, opts ...grpc.CallOption) (*ListPermissionsByScopeResponse, error)
	AssociatePermissionsToScope(ctx context.Context, in *AssociatePermissionsToScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*v1alpha1.Event, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	EventSearchPredicates(ctx context.Context, in *EventSearchPredicatesRequest, opts ...grpc.CallOption) (*EventSearchPredicatesResponse, error)
	SearchEvents(ctx context.Context, in *SearchEventsRequest, opts ...grpc.CallOption) (*SearchEventsResponse, error)
	GetTheme(ctx context.Context, in *GetThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error)
	ListThemes(ctx context.Context, in *ListThemesRequest, opts ...grpc.CallOption) (*ListThemesResponse, error)
	CreateTheme(ctx context.Context, in *CreateThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error)
	UpdateTheme(ctx context.Context, in *UpdateThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error)
	PatchTheme(ctx context.Context, in *PatchThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error)
	DeleteTheme(ctx context.Context, in *DeleteThemeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAppearanceProfile(ctx context.Context, in *GetAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error)
	ListAppearanceProfiles(ctx context.Context, in *ListAppearanceProfilesRequest, opts ...grpc.CallOption) (*ListAppearanceProfilesResponse, error)
	CreateAppearanceProfile(ctx context.Context, in *CreateAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error)
	UpdateAppearanceProfile(ctx context.Context, in *UpdateAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error)
	PatchAppearanceProfile(ctx context.Context, in *PatchAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error)
	DeleteAppearanceProfile(ctx context.Context, in *DeleteAppearanceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEndpoint(ctx context.Context, in *GetEndpointRequest, opts ...grpc.CallOption) (*v1alpha1.Endpoint, error)
	ListEndpoints(ctx context.Context, in *ListEndpointsRequest, opts ...grpc.CallOption) (*ListEndpointsResponse, error)
	CreateEndpoint(ctx context.Context, in *CreateEndpointRequest, opts ...grpc.CallOption) (*v1alpha1.Endpoint, error)
	UpdateEndpoint(ctx context.Context, in *UpdateEndpointRequest, opts ...grpc.CallOption) (*v1alpha1.Endpoint, error)
	PatchEndpoint(ctx context.Context, in *PatchEndpointRequest, opts ...grpc.CallOption) (*v1alpha1.Endpoint, error)
	DeleteEndpoint(ctx context.Context, in *DeleteEndpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authwiseIdentityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthwiseIdentityServiceClient(cc grpc.ClientConnInterface) AuthwiseIdentityServiceClient {
	return &authwiseIdentityServiceClient{cc}
}

func (c *authwiseIdentityServiceClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error) {
	out := new(v1alpha1.Tenant)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListTenants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error) {
	out := new(v1alpha1.Tenant)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error) {
	out := new(v1alpha1.Tenant)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchTenant(ctx context.Context, in *PatchTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error) {
	out := new(v1alpha1.Tenant)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*v1alpha1.Domain, error) {
	out := new(v1alpha1.Domain)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*v1alpha1.Domain, error) {
	out := new(v1alpha1.Domain)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*v1alpha1.Domain, error) {
	out := new(v1alpha1.Domain)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*v1alpha1.Domain, error) {
	out := new(v1alpha1.Domain)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetIssuer(ctx context.Context, in *GetIssuerRequest, opts ...grpc.CallOption) (*v1alpha1.Issuer, error) {
	out := new(v1alpha1.Issuer)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetIssuer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListIssuers(ctx context.Context, in *ListIssuersRequest, opts ...grpc.CallOption) (*ListIssuersResponse, error) {
	out := new(ListIssuersResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListIssuers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateIssuer(ctx context.Context, in *CreateIssuerRequest, opts ...grpc.CallOption) (*v1alpha1.Issuer, error) {
	out := new(v1alpha1.Issuer)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateIssuer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateIssuer(ctx context.Context, in *UpdateIssuerRequest, opts ...grpc.CallOption) (*v1alpha1.Issuer, error) {
	out := new(v1alpha1.Issuer)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateIssuer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchIssuer(ctx context.Context, in *PatchIssuerRequest, opts ...grpc.CallOption) (*v1alpha1.Issuer, error) {
	out := new(v1alpha1.Issuer)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchIssuer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteIssuer(ctx context.Context, in *DeleteIssuerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteIssuer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*v1alpha1.Asset, error) {
	out := new(v1alpha1.Asset)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*v1alpha1.Asset, error) {
	out := new(v1alpha1.Asset)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*v1alpha1.Asset, error) {
	out := new(v1alpha1.Asset)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchAsset(ctx context.Context, in *PatchAssetRequest, opts ...grpc.CallOption) (*v1alpha1.Asset, error) {
	out := new(v1alpha1.Asset)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UploadAsset(ctx context.Context, opts ...grpc.CallOption) (AuthwiseIdentityService_UploadAssetClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthwiseIdentityService_ServiceDesc.Streams[0], AuthwiseIdentityService_UploadAsset_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &authwiseIdentityServiceUploadAssetClient{stream}
	return x, nil
}

type AuthwiseIdentityService_UploadAssetClient interface {
	Send(*UploadAssetRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type authwiseIdentityServiceUploadAssetClient struct {
	grpc.ClientStream
}

func (x *authwiseIdentityServiceUploadAssetClient) Send(m *UploadAssetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authwiseIdentityServiceUploadAssetClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authwiseIdentityServiceClient) DownloadAsset(ctx context.Context, in *DownloadAssetRequest, opts ...grpc.CallOption) (AuthwiseIdentityService_DownloadAssetClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthwiseIdentityService_ServiceDesc.Streams[1], AuthwiseIdentityService_DownloadAsset_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &authwiseIdentityServiceDownloadAssetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthwiseIdentityService_DownloadAssetClient interface {
	Recv() (*AssetDownloadResponse, error)
	grpc.ClientStream
}

type authwiseIdentityServiceDownloadAssetClient struct {
	grpc.ClientStream
}

func (x *authwiseIdentityServiceDownloadAssetClient) Recv() (*AssetDownloadResponse, error) {
	m := new(AssetDownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authwiseIdentityServiceClient) RemoveAsset(ctx context.Context, in *RemoveAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_RemoveAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*v1alpha1.Secret, error) {
	out := new(v1alpha1.Secret)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error) {
	out := new(ListSecretsResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*v1alpha1.Secret, error) {
	out := new(v1alpha1.Secret)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateSecret(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*v1alpha1.Secret, error) {
	out := new(v1alpha1.Secret)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchSecret(ctx context.Context, in *PatchSecretRequest, opts ...grpc.CallOption) (*v1alpha1.Secret, error) {
	out := new(v1alpha1.Secret)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetRealm(ctx context.Context, in *GetRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error) {
	out := new(v1alpha1.Realm)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetRealm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListRealms(ctx context.Context, in *ListRealmsRequest, opts ...grpc.CallOption) (*ListRealmsResponse, error) {
	out := new(ListRealmsResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListRealms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateRealm(ctx context.Context, in *CreateRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error) {
	out := new(v1alpha1.Realm)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateRealm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateRealm(ctx context.Context, in *UpdateRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error) {
	out := new(v1alpha1.Realm)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateRealm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchRealm(ctx context.Context, in *PatchRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error) {
	out := new(v1alpha1.Realm)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchRealm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteRealm(ctx context.Context, in *DeleteRealmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteRealm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error) {
	out := new(v1alpha1.User)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error) {
	out := new(v1alpha1.User)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error) {
	out := new(v1alpha1.User)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error) {
	out := new(v1alpha1.User)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UserSearchPredicates(ctx context.Context, in *UserSearchPredicatesRequest, opts ...grpc.CallOption) (*UserSearchPredicatesResponse, error) {
	out := new(UserSearchPredicatesResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UserSearchPredicates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_SearchUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListRolesByUser(ctx context.Context, in *ListRolesByUserRequest, opts ...grpc.CallOption) (*ListRolesByUserResponse, error) {
	out := new(ListRolesByUserResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListRolesByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) AssociateRolesToUser(ctx context.Context, in *AssociateRolesToUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_AssociateRolesToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error) {
	out := new(v1alpha1.Provider)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error) {
	out := new(v1alpha1.Provider)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error) {
	out := new(v1alpha1.Provider)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchProvider(ctx context.Context, in *PatchProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error) {
	out := new(v1alpha1.Provider)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error) {
	out := new(v1alpha1.Client)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	out := new(ListClientsResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error) {
	out := new(v1alpha1.Client)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error) {
	out := new(v1alpha1.Client)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchClient(ctx context.Context, in *PatchClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error) {
	out := new(v1alpha1.Client)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error) {
	out := new(v1alpha1.Role)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error) {
	out := new(v1alpha1.Role)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error) {
	out := new(v1alpha1.Role)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error) {
	out := new(v1alpha1.Role)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListPermissionsByRole(ctx context.Context, in *ListPermissionsByRoleRequest, opts ...grpc.CallOption) (*ListPermissionsByRoleResponse, error) {
	out := new(ListPermissionsByRoleResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListPermissionsByRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) AssociatePermissionsToRole(ctx context.Context, in *AssociatePermissionsToRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_AssociatePermissionsToRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error) {
	out := new(v1alpha1.Permission)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error) {
	out := new(v1alpha1.Permission)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreatePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error) {
	out := new(v1alpha1.Permission)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdatePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchPermission(ctx context.Context, in *PatchPermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error) {
	out := new(v1alpha1.Permission)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeletePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetAudience(ctx context.Context, in *GetAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error) {
	out := new(v1alpha1.Audience)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetAudience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListAudiences(ctx context.Context, in *ListAudiencesRequest, opts ...grpc.CallOption) (*ListAudiencesResponse, error) {
	out := new(ListAudiencesResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListAudiences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateAudience(ctx context.Context, in *CreateAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error) {
	out := new(v1alpha1.Audience)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateAudience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateAudience(ctx context.Context, in *UpdateAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error) {
	out := new(v1alpha1.Audience)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateAudience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchAudience(ctx context.Context, in *PatchAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error) {
	out := new(v1alpha1.Audience)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchAudience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteAudience(ctx context.Context, in *DeleteAudienceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteAudience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetScope(ctx context.Context, in *GetScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error) {
	out := new(v1alpha1.Scope)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*ListScopesResponse, error) {
	out := new(ListScopesResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error) {
	out := new(v1alpha1.Scope)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateScope(ctx context.Context, in *UpdateScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error) {
	out := new(v1alpha1.Scope)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchScope(ctx context.Context, in *PatchScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error) {
	out := new(v1alpha1.Scope)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteScope(ctx context.Context, in *DeleteScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListPermissionsByScope(ctx context.Context, in *ListPermissionsByScopeRequest, opts ...grpc.CallOption) (*ListPermissionsByScopeResponse, error) {
	out := new(ListPermissionsByScopeResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListPermissionsByScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) AssociatePermissionsToScope(ctx context.Context, in *AssociatePermissionsToScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_AssociatePermissionsToScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*v1alpha1.Event, error) {
	out := new(v1alpha1.Event)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) EventSearchPredicates(ctx context.Context, in *EventSearchPredicatesRequest, opts ...grpc.CallOption) (*EventSearchPredicatesResponse, error) {
	out := new(EventSearchPredicatesResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_EventSearchPredicates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) SearchEvents(ctx context.Context, in *SearchEventsRequest, opts ...grpc.CallOption) (*SearchEventsResponse, error) {
	out := new(SearchEventsResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_SearchEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetTheme(ctx context.Context, in *GetThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error) {
	out := new(v1alpha1.Theme)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListThemes(ctx context.Context, in *ListThemesRequest, opts ...grpc.CallOption) (*ListThemesResponse, error) {
	out := new(ListThemesResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListThemes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateTheme(ctx context.Context, in *CreateThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error) {
	out := new(v1alpha1.Theme)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateTheme(ctx context.Context, in *UpdateThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error) {
	out := new(v1alpha1.Theme)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchTheme(ctx context.Context, in *PatchThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error) {
	out := new(v1alpha1.Theme)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteTheme(ctx context.Context, in *DeleteThemeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetAppearanceProfile(ctx context.Context, in *GetAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error) {
	out := new(v1alpha1.AppearanceProfile)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetAppearanceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListAppearanceProfiles(ctx context.Context, in *ListAppearanceProfilesRequest, opts ...grpc.CallOption) (*ListAppearanceProfilesResponse, error) {
	out := new(ListAppearanceProfilesResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListAppearanceProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateAppearanceProfile(ctx context.Context, in *CreateAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error) {
	out := new(v1alpha1.AppearanceProfile)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateAppearanceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateAppearanceProfile(ctx context.Context, in *UpdateAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error) {
	out := new(v1alpha1.AppearanceProfile)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateAppearanceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchAppearanceProfile(ctx context.Context, in *PatchAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error) {
	out := new(v1alpha1.AppearanceProfile)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchAppearanceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteAppearanceProfile(ctx context.Context, in *DeleteAppearanceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteAppearanceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) GetEndpoint(ctx context.Context, in *GetEndpointRequest, opts ...grpc.CallOption) (*v1alpha1.Endpoint, error) {
	out := new(v1alpha1.Endpoint)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_GetEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) ListEndpoints(ctx context.Context, in *ListEndpointsRequest, opts ...grpc.CallOption) (*ListEndpointsResponse, error) {
	out := new(ListEndpointsResponse)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_ListEndpoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) CreateEndpoint(ctx context.Context, in *CreateEndpointRequest, opts ...grpc.CallOption) (*v1alpha1.Endpoint, error) {
	out := new(v1alpha1.Endpoint)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_CreateEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) UpdateEndpoint(ctx context.Context, in *UpdateEndpointRequest, opts ...grpc.CallOption) (*v1alpha1.Endpoint, error) {
	out := new(v1alpha1.Endpoint)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_UpdateEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) PatchEndpoint(ctx context.Context, in *PatchEndpointRequest, opts ...grpc.CallOption) (*v1alpha1.Endpoint, error) {
	out := new(v1alpha1.Endpoint)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_PatchEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseIdentityServiceClient) DeleteEndpoint(ctx context.Context, in *DeleteEndpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseIdentityService_DeleteEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthwiseIdentityServiceServer is the server API for AuthwiseIdentityService service.
// All implementations should embed UnimplementedAuthwiseIdentityServiceServer
// for forward compatibility
type AuthwiseIdentityServiceServer interface {
	GetTenant(context.Context, *GetTenantRequest) (*v1alpha1.Tenant, error)
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	CreateTenant(context.Context, *CreateTenantRequest) (*v1alpha1.Tenant, error)
	UpdateTenant(context.Context, *UpdateTenantRequest) (*v1alpha1.Tenant, error)
	PatchTenant(context.Context, *PatchTenantRequest) (*v1alpha1.Tenant, error)
	DeleteTenant(context.Context, *DeleteTenantRequest) (*emptypb.Empty, error)
	GetDomain(context.Context, *GetDomainRequest) (*v1alpha1.Domain, error)
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	CreateDomain(context.Context, *CreateDomainRequest) (*v1alpha1.Domain, error)
	UpdateDomain(context.Context, *UpdateDomainRequest) (*v1alpha1.Domain, error)
	PatchDomain(context.Context, *PatchDomainRequest) (*v1alpha1.Domain, error)
	DeleteDomain(context.Context, *DeleteDomainRequest) (*emptypb.Empty, error)
	GetIssuer(context.Context, *GetIssuerRequest) (*v1alpha1.Issuer, error)
	ListIssuers(context.Context, *ListIssuersRequest) (*ListIssuersResponse, error)
	CreateIssuer(context.Context, *CreateIssuerRequest) (*v1alpha1.Issuer, error)
	UpdateIssuer(context.Context, *UpdateIssuerRequest) (*v1alpha1.Issuer, error)
	PatchIssuer(context.Context, *PatchIssuerRequest) (*v1alpha1.Issuer, error)
	DeleteIssuer(context.Context, *DeleteIssuerRequest) (*emptypb.Empty, error)
	GetAsset(context.Context, *GetAssetRequest) (*v1alpha1.Asset, error)
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	CreateAsset(context.Context, *CreateAssetRequest) (*v1alpha1.Asset, error)
	UpdateAsset(context.Context, *UpdateAssetRequest) (*v1alpha1.Asset, error)
	PatchAsset(context.Context, *PatchAssetRequest) (*v1alpha1.Asset, error)
	DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error)
	UploadAsset(AuthwiseIdentityService_UploadAssetServer) error
	DownloadAsset(*DownloadAssetRequest, AuthwiseIdentityService_DownloadAssetServer) error
	RemoveAsset(context.Context, *RemoveAssetRequest) (*emptypb.Empty, error)
	GetSecret(context.Context, *GetSecretRequest) (*v1alpha1.Secret, error)
	ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error)
	CreateSecret(context.Context, *CreateSecretRequest) (*v1alpha1.Secret, error)
	UpdateSecret(context.Context, *UpdateSecretRequest) (*v1alpha1.Secret, error)
	PatchSecret(context.Context, *PatchSecretRequest) (*v1alpha1.Secret, error)
	DeleteSecret(context.Context, *DeleteSecretRequest) (*emptypb.Empty, error)
	GetRealm(context.Context, *GetRealmRequest) (*v1alpha1.Realm, error)
	ListRealms(context.Context, *ListRealmsRequest) (*ListRealmsResponse, error)
	CreateRealm(context.Context, *CreateRealmRequest) (*v1alpha1.Realm, error)
	UpdateRealm(context.Context, *UpdateRealmRequest) (*v1alpha1.Realm, error)
	PatchRealm(context.Context, *PatchRealmRequest) (*v1alpha1.Realm, error)
	DeleteRealm(context.Context, *DeleteRealmRequest) (*emptypb.Empty, error)
	GetUser(context.Context, *GetUserRequest) (*v1alpha1.User, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*v1alpha1.User, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*v1alpha1.User, error)
	PatchUser(context.Context, *PatchUserRequest) (*v1alpha1.User, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	UserSearchPredicates(context.Context, *UserSearchPredicatesRequest) (*UserSearchPredicatesResponse, error)
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	ListRolesByUser(context.Context, *ListRolesByUserRequest) (*ListRolesByUserResponse, error)
	AssociateRolesToUser(context.Context, *AssociateRolesToUserRequest) (*emptypb.Empty, error)
	GetProvider(context.Context, *GetProviderRequest) (*v1alpha1.Provider, error)
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	CreateProvider(context.Context, *CreateProviderRequest) (*v1alpha1.Provider, error)
	UpdateProvider(context.Context, *UpdateProviderRequest) (*v1alpha1.Provider, error)
	PatchProvider(context.Context, *PatchProviderRequest) (*v1alpha1.Provider, error)
	DeleteProvider(context.Context, *DeleteProviderRequest) (*emptypb.Empty, error)
	GetClient(context.Context, *GetClientRequest) (*v1alpha1.Client, error)
	ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error)
	CreateClient(context.Context, *CreateClientRequest) (*v1alpha1.Client, error)
	UpdateClient(context.Context, *UpdateClientRequest) (*v1alpha1.Client, error)
	PatchClient(context.Context, *PatchClientRequest) (*v1alpha1.Client, error)
	DeleteClient(context.Context, *DeleteClientRequest) (*emptypb.Empty, error)
	GetRole(context.Context, *GetRoleRequest) (*v1alpha1.Role, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*v1alpha1.Role, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*v1alpha1.Role, error)
	PatchRole(context.Context, *PatchRoleRequest) (*v1alpha1.Role, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	ListPermissionsByRole(context.Context, *ListPermissionsByRoleRequest) (*ListPermissionsByRoleResponse, error)
	AssociatePermissionsToRole(context.Context, *AssociatePermissionsToRoleRequest) (*emptypb.Empty, error)
	GetPermission(context.Context, *GetPermissionRequest) (*v1alpha1.Permission, error)
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	CreatePermission(context.Context, *CreatePermissionRequest) (*v1alpha1.Permission, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*v1alpha1.Permission, error)
	PatchPermission(context.Context, *PatchPermissionRequest) (*v1alpha1.Permission, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*emptypb.Empty, error)
	GetAudience(context.Context, *GetAudienceRequest) (*v1alpha1.Audience, error)
	ListAudiences(context.Context, *ListAudiencesRequest) (*ListAudiencesResponse, error)
	CreateAudience(context.Context, *CreateAudienceRequest) (*v1alpha1.Audience, error)
	UpdateAudience(context.Context, *UpdateAudienceRequest) (*v1alpha1.Audience, error)
	PatchAudience(context.Context, *PatchAudienceRequest) (*v1alpha1.Audience, error)
	DeleteAudience(context.Context, *DeleteAudienceRequest) (*emptypb.Empty, error)
	GetScope(context.Context, *GetScopeRequest) (*v1alpha1.Scope, error)
	ListScopes(context.Context, *ListScopesRequest) (*ListScopesResponse, error)
	CreateScope(context.Context, *CreateScopeRequest) (*v1alpha1.Scope, error)
	UpdateScope(context.Context, *UpdateScopeRequest) (*v1alpha1.Scope, error)
	PatchScope(context.Context, *PatchScopeRequest) (*v1alpha1.Scope, error)
	DeleteScope(context.Context, *DeleteScopeRequest) (*emptypb.Empty, error)
	ListPermissionsByScope(context.Context, *ListPermissionsByScopeRequest) (*ListPermissionsByScopeResponse, error)
	AssociatePermissionsToScope(context.Context, *AssociatePermissionsToScopeRequest) (*emptypb.Empty, error)
	GetEvent(context.Context, *GetEventRequest) (*v1alpha1.Event, error)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	EventSearchPredicates(context.Context, *EventSearchPredicatesRequest) (*EventSearchPredicatesResponse, error)
	SearchEvents(context.Context, *SearchEventsRequest) (*SearchEventsResponse, error)
	GetTheme(context.Context, *GetThemeRequest) (*v1alpha1.Theme, error)
	ListThemes(context.Context, *ListThemesRequest) (*ListThemesResponse, error)
	CreateTheme(context.Context, *CreateThemeRequest) (*v1alpha1.Theme, error)
	UpdateTheme(context.Context, *UpdateThemeRequest) (*v1alpha1.Theme, error)
	PatchTheme(context.Context, *PatchThemeRequest) (*v1alpha1.Theme, error)
	DeleteTheme(context.Context, *DeleteThemeRequest) (*emptypb.Empty, error)
	GetAppearanceProfile(context.Context, *GetAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error)
	ListAppearanceProfiles(context.Context, *ListAppearanceProfilesRequest) (*ListAppearanceProfilesResponse, error)
	CreateAppearanceProfile(context.Context, *CreateAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error)
	UpdateAppearanceProfile(context.Context, *UpdateAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error)
	PatchAppearanceProfile(context.Context, *PatchAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error)
	DeleteAppearanceProfile(context.Context, *DeleteAppearanceProfileRequest) (*emptypb.Empty, error)
	GetEndpoint(context.Context, *GetEndpointRequest) (*v1alpha1.Endpoint, error)
	ListEndpoints(context.Context, *ListEndpointsRequest) (*ListEndpointsResponse, error)
	CreateEndpoint(context.Context, *CreateEndpointRequest) (*v1alpha1.Endpoint, error)
	UpdateEndpoint(context.Context, *UpdateEndpointRequest) (*v1alpha1.Endpoint, error)
	PatchEndpoint(context.Context, *PatchEndpointRequest) (*v1alpha1.Endpoint, error)
	DeleteEndpoint(context.Context, *DeleteEndpointRequest) (*emptypb.Empty, error)
}

// UnimplementedAuthwiseIdentityServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthwiseIdentityServiceServer struct {
}

func (UnimplementedAuthwiseIdentityServiceServer) GetTenant(context.Context, *GetTenantRequest) (*v1alpha1.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateTenant(context.Context, *CreateTenantRequest) (*v1alpha1.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateTenant(context.Context, *UpdateTenantRequest) (*v1alpha1.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchTenant(context.Context, *PatchTenantRequest) (*v1alpha1.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTenant not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteTenant(context.Context, *DeleteTenantRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetDomain(context.Context, *GetDomainRequest) (*v1alpha1.Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomains not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateDomain(context.Context, *CreateDomainRequest) (*v1alpha1.Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateDomain(context.Context, *UpdateDomainRequest) (*v1alpha1.Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomain not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchDomain(context.Context, *PatchDomainRequest) (*v1alpha1.Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDomain not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteDomain(context.Context, *DeleteDomainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetIssuer(context.Context, *GetIssuerRequest) (*v1alpha1.Issuer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuer not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListIssuers(context.Context, *ListIssuersRequest) (*ListIssuersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIssuers not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateIssuer(context.Context, *CreateIssuerRequest) (*v1alpha1.Issuer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssuer not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateIssuer(context.Context, *UpdateIssuerRequest) (*v1alpha1.Issuer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssuer not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchIssuer(context.Context, *PatchIssuerRequest) (*v1alpha1.Issuer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchIssuer not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteIssuer(context.Context, *DeleteIssuerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIssuer not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetAsset(context.Context, *GetAssetRequest) (*v1alpha1.Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateAsset(context.Context, *CreateAssetRequest) (*v1alpha1.Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAsset not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateAsset(context.Context, *UpdateAssetRequest) (*v1alpha1.Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsset not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchAsset(context.Context, *PatchAssetRequest) (*v1alpha1.Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAsset not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAsset not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UploadAsset(AuthwiseIdentityService_UploadAssetServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAsset not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DownloadAsset(*DownloadAssetRequest, AuthwiseIdentityService_DownloadAssetServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadAsset not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) RemoveAsset(context.Context, *RemoveAssetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAsset not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetSecret(context.Context, *GetSecretRequest) (*v1alpha1.Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateSecret(context.Context, *CreateSecretRequest) (*v1alpha1.Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateSecret(context.Context, *UpdateSecretRequest) (*v1alpha1.Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchSecret(context.Context, *PatchSecretRequest) (*v1alpha1.Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchSecret not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetRealm(context.Context, *GetRealmRequest) (*v1alpha1.Realm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealm not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListRealms(context.Context, *ListRealmsRequest) (*ListRealmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRealms not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateRealm(context.Context, *CreateRealmRequest) (*v1alpha1.Realm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRealm not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateRealm(context.Context, *UpdateRealmRequest) (*v1alpha1.Realm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRealm not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchRealm(context.Context, *PatchRealmRequest) (*v1alpha1.Realm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRealm not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteRealm(context.Context, *DeleteRealmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRealm not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetUser(context.Context, *GetUserRequest) (*v1alpha1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateUser(context.Context, *CreateUserRequest) (*v1alpha1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*v1alpha1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchUser(context.Context, *PatchUserRequest) (*v1alpha1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchUser not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UserSearchPredicates(context.Context, *UserSearchPredicatesRequest) (*UserSearchPredicatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSearchPredicates not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListRolesByUser(context.Context, *ListRolesByUserRequest) (*ListRolesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolesByUser not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) AssociateRolesToUser(context.Context, *AssociateRolesToUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateRolesToUser not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetProvider(context.Context, *GetProviderRequest) (*v1alpha1.Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvider not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateProvider(context.Context, *CreateProviderRequest) (*v1alpha1.Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProvider not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateProvider(context.Context, *UpdateProviderRequest) (*v1alpha1.Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProvider not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchProvider(context.Context, *PatchProviderRequest) (*v1alpha1.Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProvider not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteProvider(context.Context, *DeleteProviderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetClient(context.Context, *GetClientRequest) (*v1alpha1.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateClient(context.Context, *CreateClientRequest) (*v1alpha1.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateClient(context.Context, *UpdateClientRequest) (*v1alpha1.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchClient(context.Context, *PatchClientRequest) (*v1alpha1.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchClient not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteClient(context.Context, *DeleteClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetRole(context.Context, *GetRoleRequest) (*v1alpha1.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*v1alpha1.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*v1alpha1.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchRole(context.Context, *PatchRoleRequest) (*v1alpha1.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRole not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListPermissionsByRole(context.Context, *ListPermissionsByRoleRequest) (*ListPermissionsByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionsByRole not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) AssociatePermissionsToRole(context.Context, *AssociatePermissionsToRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociatePermissionsToRole not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetPermission(context.Context, *GetPermissionRequest) (*v1alpha1.Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreatePermission(context.Context, *CreatePermissionRequest) (*v1alpha1.Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdatePermission(context.Context, *UpdatePermissionRequest) (*v1alpha1.Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchPermission(context.Context, *PatchPermissionRequest) (*v1alpha1.Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchPermission not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeletePermission(context.Context, *DeletePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetAudience(context.Context, *GetAudienceRequest) (*v1alpha1.Audience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudience not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListAudiences(context.Context, *ListAudiencesRequest) (*ListAudiencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAudiences not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateAudience(context.Context, *CreateAudienceRequest) (*v1alpha1.Audience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAudience not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateAudience(context.Context, *UpdateAudienceRequest) (*v1alpha1.Audience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAudience not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchAudience(context.Context, *PatchAudienceRequest) (*v1alpha1.Audience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAudience not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteAudience(context.Context, *DeleteAudienceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAudience not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetScope(context.Context, *GetScopeRequest) (*v1alpha1.Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScope not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListScopes(context.Context, *ListScopesRequest) (*ListScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScopes not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateScope(context.Context, *CreateScopeRequest) (*v1alpha1.Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScope not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateScope(context.Context, *UpdateScopeRequest) (*v1alpha1.Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScope not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchScope(context.Context, *PatchScopeRequest) (*v1alpha1.Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchScope not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteScope(context.Context, *DeleteScopeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScope not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListPermissionsByScope(context.Context, *ListPermissionsByScopeRequest) (*ListPermissionsByScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionsByScope not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) AssociatePermissionsToScope(context.Context, *AssociatePermissionsToScopeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociatePermissionsToScope not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetEvent(context.Context, *GetEventRequest) (*v1alpha1.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) EventSearchPredicates(context.Context, *EventSearchPredicatesRequest) (*EventSearchPredicatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventSearchPredicates not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) SearchEvents(context.Context, *SearchEventsRequest) (*SearchEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEvents not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetTheme(context.Context, *GetThemeRequest) (*v1alpha1.Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheme not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListThemes(context.Context, *ListThemesRequest) (*ListThemesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThemes not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateTheme(context.Context, *CreateThemeRequest) (*v1alpha1.Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTheme not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateTheme(context.Context, *UpdateThemeRequest) (*v1alpha1.Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTheme not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchTheme(context.Context, *PatchThemeRequest) (*v1alpha1.Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTheme not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteTheme(context.Context, *DeleteThemeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTheme not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetAppearanceProfile(context.Context, *GetAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppearanceProfile not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListAppearanceProfiles(context.Context, *ListAppearanceProfilesRequest) (*ListAppearanceProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppearanceProfiles not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateAppearanceProfile(context.Context, *CreateAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppearanceProfile not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateAppearanceProfile(context.Context, *UpdateAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppearanceProfile not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchAppearanceProfile(context.Context, *PatchAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAppearanceProfile not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteAppearanceProfile(context.Context, *DeleteAppearanceProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppearanceProfile not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) GetEndpoint(context.Context, *GetEndpointRequest) (*v1alpha1.Endpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpoint not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) ListEndpoints(context.Context, *ListEndpointsRequest) (*ListEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEndpoints not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) CreateEndpoint(context.Context, *CreateEndpointRequest) (*v1alpha1.Endpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpoint not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) UpdateEndpoint(context.Context, *UpdateEndpointRequest) (*v1alpha1.Endpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpoint not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) PatchEndpoint(context.Context, *PatchEndpointRequest) (*v1alpha1.Endpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEndpoint not implemented")
}
func (UnimplementedAuthwiseIdentityServiceServer) DeleteEndpoint(context.Context, *DeleteEndpointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEndpoint not implemented")
}

// UnsafeAuthwiseIdentityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthwiseIdentityServiceServer will
// result in compilation errors.
type UnsafeAuthwiseIdentityServiceServer interface {
	mustEmbedUnimplementedAuthwiseIdentityServiceServer()
}

func RegisterAuthwiseIdentityServiceServer(s grpc.ServiceRegistrar, srv AuthwiseIdentityServiceServer) {
	s.RegisterService(&AuthwiseIdentityService_ServiceDesc, srv)
}

func _AuthwiseIdentityService_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchTenant(ctx, req.(*PatchTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateDomain(ctx, req.(*UpdateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchDomain(ctx, req.(*PatchDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetIssuer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetIssuer(ctx, req.(*GetIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListIssuers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIssuersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListIssuers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListIssuers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListIssuers(ctx, req.(*ListIssuersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateIssuer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateIssuer(ctx, req.(*CreateIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateIssuer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateIssuer(ctx, req.(*UpdateIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchIssuer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchIssuer(ctx, req.(*PatchIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteIssuer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteIssuer(ctx, req.(*DeleteIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateAsset(ctx, req.(*CreateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateAsset(ctx, req.(*UpdateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchAsset(ctx, req.(*PatchAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteAsset(ctx, req.(*DeleteAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UploadAsset_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthwiseIdentityServiceServer).UploadAsset(&authwiseIdentityServiceUploadAssetServer{stream})
}

type AuthwiseIdentityService_UploadAssetServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*UploadAssetRequest, error)
	grpc.ServerStream
}

type authwiseIdentityServiceUploadAssetServer struct {
	grpc.ServerStream
}

func (x *authwiseIdentityServiceUploadAssetServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authwiseIdentityServiceUploadAssetServer) Recv() (*UploadAssetRequest, error) {
	m := new(UploadAssetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthwiseIdentityService_DownloadAsset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadAssetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthwiseIdentityServiceServer).DownloadAsset(m, &authwiseIdentityServiceDownloadAssetServer{stream})
}

type AuthwiseIdentityService_DownloadAssetServer interface {
	Send(*AssetDownloadResponse) error
	grpc.ServerStream
}

type authwiseIdentityServiceDownloadAssetServer struct {
	grpc.ServerStream
}

func (x *authwiseIdentityServiceDownloadAssetServer) Send(m *AssetDownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthwiseIdentityService_RemoveAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).RemoveAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_RemoveAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).RemoveAsset(ctx, req.(*RemoveAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListSecrets(ctx, req.(*ListSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateSecret(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateSecret(ctx, req.(*UpdateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchSecret(ctx, req.(*PatchSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetRealm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetRealm(ctx, req.(*GetRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListRealms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRealmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListRealms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListRealms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListRealms(ctx, req.(*ListRealmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateRealm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateRealm(ctx, req.(*CreateRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateRealm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateRealm(ctx, req.(*UpdateRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchRealm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchRealm(ctx, req.(*PatchRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteRealm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteRealm(ctx, req.(*DeleteRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchUser(ctx, req.(*PatchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UserSearchPredicates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSearchPredicatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UserSearchPredicates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UserSearchPredicates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UserSearchPredicates(ctx, req.(*UserSearchPredicatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListRolesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListRolesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListRolesByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListRolesByUser(ctx, req.(*ListRolesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_AssociateRolesToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateRolesToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).AssociateRolesToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_AssociateRolesToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).AssociateRolesToUser(ctx, req.(*AssociateRolesToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetProvider(ctx, req.(*GetProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateProvider(ctx, req.(*CreateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateProvider(ctx, req.(*UpdateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchProvider(ctx, req.(*PatchProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteProvider(ctx, req.(*DeleteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetClient(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListClients(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchClient(ctx, req.(*PatchClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteClient(ctx, req.(*DeleteClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchRole(ctx, req.(*PatchRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListPermissionsByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListPermissionsByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListPermissionsByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListPermissionsByRole(ctx, req.(*ListPermissionsByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_AssociatePermissionsToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociatePermissionsToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).AssociatePermissionsToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_AssociatePermissionsToRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).AssociatePermissionsToRole(ctx, req.(*AssociatePermissionsToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListPermissions(ctx, req.(*ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchPermission(ctx, req.(*PatchPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetAudience(ctx, req.(*GetAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListAudiences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAudiencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListAudiences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListAudiences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListAudiences(ctx, req.(*ListAudiencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateAudience(ctx, req.(*CreateAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateAudience(ctx, req.(*UpdateAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchAudience(ctx, req.(*PatchAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteAudience(ctx, req.(*DeleteAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetScope(ctx, req.(*GetScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListScopes(ctx, req.(*ListScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateScope(ctx, req.(*CreateScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateScope(ctx, req.(*UpdateScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchScope(ctx, req.(*PatchScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteScope(ctx, req.(*DeleteScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListPermissionsByScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsByScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListPermissionsByScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListPermissionsByScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListPermissionsByScope(ctx, req.(*ListPermissionsByScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_AssociatePermissionsToScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociatePermissionsToScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).AssociatePermissionsToScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_AssociatePermissionsToScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).AssociatePermissionsToScope(ctx, req.(*AssociatePermissionsToScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_EventSearchPredicates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSearchPredicatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).EventSearchPredicates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_EventSearchPredicates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).EventSearchPredicates(ctx, req.(*EventSearchPredicatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_SearchEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).SearchEvents(ctx, req.(*SearchEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetTheme(ctx, req.(*GetThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThemesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListThemes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListThemes(ctx, req.(*ListThemesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateTheme(ctx, req.(*CreateThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateTheme(ctx, req.(*UpdateThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchTheme(ctx, req.(*PatchThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteTheme(ctx, req.(*DeleteThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetAppearanceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppearanceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetAppearanceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetAppearanceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetAppearanceProfile(ctx, req.(*GetAppearanceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListAppearanceProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppearanceProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListAppearanceProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListAppearanceProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListAppearanceProfiles(ctx, req.(*ListAppearanceProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateAppearanceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppearanceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateAppearanceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateAppearanceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateAppearanceProfile(ctx, req.(*CreateAppearanceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateAppearanceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppearanceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateAppearanceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateAppearanceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateAppearanceProfile(ctx, req.(*UpdateAppearanceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchAppearanceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppearanceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchAppearanceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchAppearanceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchAppearanceProfile(ctx, req.(*PatchAppearanceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteAppearanceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppearanceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteAppearanceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteAppearanceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteAppearanceProfile(ctx, req.(*DeleteAppearanceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_GetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).GetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_GetEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).GetEndpoint(ctx, req.(*GetEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_ListEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).ListEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_ListEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).ListEndpoints(ctx, req.(*ListEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_CreateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).CreateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_CreateEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).CreateEndpoint(ctx, req.(*CreateEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_UpdateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).UpdateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_UpdateEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).UpdateEndpoint(ctx, req.(*UpdateEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_PatchEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).PatchEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_PatchEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).PatchEndpoint(ctx, req.(*PatchEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseIdentityService_DeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseIdentityServiceServer).DeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseIdentityService_DeleteEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseIdentityServiceServer).DeleteEndpoint(ctx, req.(*DeleteEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthwiseIdentityService_ServiceDesc is the grpc.ServiceDesc for AuthwiseIdentityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthwiseIdentityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authwise.identity.v1alpha1.AuthwiseIdentityService",
	HandlerType: (*AuthwiseIdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenant",
			Handler:    _AuthwiseIdentityService_GetTenant_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _AuthwiseIdentityService_ListTenants_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _AuthwiseIdentityService_CreateTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _AuthwiseIdentityService_UpdateTenant_Handler,
		},
		{
			MethodName: "PatchTenant",
			Handler:    _AuthwiseIdentityService_PatchTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _AuthwiseIdentityService_DeleteTenant_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _AuthwiseIdentityService_GetDomain_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _AuthwiseIdentityService_ListDomains_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _AuthwiseIdentityService_CreateDomain_Handler,
		},
		{
			MethodName: "UpdateDomain",
			Handler:    _AuthwiseIdentityService_UpdateDomain_Handler,
		},
		{
			MethodName: "PatchDomain",
			Handler:    _AuthwiseIdentityService_PatchDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _AuthwiseIdentityService_DeleteDomain_Handler,
		},
		{
			MethodName: "GetIssuer",
			Handler:    _AuthwiseIdentityService_GetIssuer_Handler,
		},
		{
			MethodName: "ListIssuers",
			Handler:    _AuthwiseIdentityService_ListIssuers_Handler,
		},
		{
			MethodName: "CreateIssuer",
			Handler:    _AuthwiseIdentityService_CreateIssuer_Handler,
		},
		{
			MethodName: "UpdateIssuer",
			Handler:    _AuthwiseIdentityService_UpdateIssuer_Handler,
		},
		{
			MethodName: "PatchIssuer",
			Handler:    _AuthwiseIdentityService_PatchIssuer_Handler,
		},
		{
			MethodName: "DeleteIssuer",
			Handler:    _AuthwiseIdentityService_DeleteIssuer_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _AuthwiseIdentityService_GetAsset_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _AuthwiseIdentityService_ListAssets_Handler,
		},
		{
			MethodName: "CreateAsset",
			Handler:    _AuthwiseIdentityService_CreateAsset_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _AuthwiseIdentityService_UpdateAsset_Handler,
		},
		{
			MethodName: "PatchAsset",
			Handler:    _AuthwiseIdentityService_PatchAsset_Handler,
		},
		{
			MethodName: "DeleteAsset",
			Handler:    _AuthwiseIdentityService_DeleteAsset_Handler,
		},
		{
			MethodName: "RemoveAsset",
			Handler:    _AuthwiseIdentityService_RemoveAsset_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _AuthwiseIdentityService_GetSecret_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _AuthwiseIdentityService_ListSecrets_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _AuthwiseIdentityService_CreateSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _AuthwiseIdentityService_UpdateSecret_Handler,
		},
		{
			MethodName: "PatchSecret",
			Handler:    _AuthwiseIdentityService_PatchSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _AuthwiseIdentityService_DeleteSecret_Handler,
		},
		{
			MethodName: "GetRealm",
			Handler:    _AuthwiseIdentityService_GetRealm_Handler,
		},
		{
			MethodName: "ListRealms",
			Handler:    _AuthwiseIdentityService_ListRealms_Handler,
		},
		{
			MethodName: "CreateRealm",
			Handler:    _AuthwiseIdentityService_CreateRealm_Handler,
		},
		{
			MethodName: "UpdateRealm",
			Handler:    _AuthwiseIdentityService_UpdateRealm_Handler,
		},
		{
			MethodName: "PatchRealm",
			Handler:    _AuthwiseIdentityService_PatchRealm_Handler,
		},
		{
			MethodName: "DeleteRealm",
			Handler:    _AuthwiseIdentityService_DeleteRealm_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthwiseIdentityService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _AuthwiseIdentityService_ListUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthwiseIdentityService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthwiseIdentityService_UpdateUser_Handler,
		},
		{
			MethodName: "PatchUser",
			Handler:    _AuthwiseIdentityService_PatchUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthwiseIdentityService_DeleteUser_Handler,
		},
		{
			MethodName: "UserSearchPredicates",
			Handler:    _AuthwiseIdentityService_UserSearchPredicates_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _AuthwiseIdentityService_SearchUsers_Handler,
		},
		{
			MethodName: "ListRolesByUser",
			Handler:    _AuthwiseIdentityService_ListRolesByUser_Handler,
		},
		{
			MethodName: "AssociateRolesToUser",
			Handler:    _AuthwiseIdentityService_AssociateRolesToUser_Handler,
		},
		{
			MethodName: "GetProvider",
			Handler:    _AuthwiseIdentityService_GetProvider_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _AuthwiseIdentityService_ListProviders_Handler,
		},
		{
			MethodName: "CreateProvider",
			Handler:    _AuthwiseIdentityService_CreateProvider_Handler,
		},
		{
			MethodName: "UpdateProvider",
			Handler:    _AuthwiseIdentityService_UpdateProvider_Handler,
		},
		{
			MethodName: "PatchProvider",
			Handler:    _AuthwiseIdentityService_PatchProvider_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _AuthwiseIdentityService_DeleteProvider_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _AuthwiseIdentityService_GetClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _AuthwiseIdentityService_ListClients_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _AuthwiseIdentityService_CreateClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _AuthwiseIdentityService_UpdateClient_Handler,
		},
		{
			MethodName: "PatchClient",
			Handler:    _AuthwiseIdentityService_PatchClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _AuthwiseIdentityService_DeleteClient_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _AuthwiseIdentityService_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _AuthwiseIdentityService_ListRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AuthwiseIdentityService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AuthwiseIdentityService_UpdateRole_Handler,
		},
		{
			MethodName: "PatchRole",
			Handler:    _AuthwiseIdentityService_PatchRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AuthwiseIdentityService_DeleteRole_Handler,
		},
		{
			MethodName: "ListPermissionsByRole",
			Handler:    _AuthwiseIdentityService_ListPermissionsByRole_Handler,
		},
		{
			MethodName: "AssociatePermissionsToRole",
			Handler:    _AuthwiseIdentityService_AssociatePermissionsToRole_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _AuthwiseIdentityService_GetPermission_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _AuthwiseIdentityService_ListPermissions_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _AuthwiseIdentityService_CreatePermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _AuthwiseIdentityService_UpdatePermission_Handler,
		},
		{
			MethodName: "PatchPermission",
			Handler:    _AuthwiseIdentityService_PatchPermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _AuthwiseIdentityService_DeletePermission_Handler,
		},
		{
			MethodName: "GetAudience",
			Handler:    _AuthwiseIdentityService_GetAudience_Handler,
		},
		{
			MethodName: "ListAudiences",
			Handler:    _AuthwiseIdentityService_ListAudiences_Handler,
		},
		{
			MethodName: "CreateAudience",
			Handler:    _AuthwiseIdentityService_CreateAudience_Handler,
		},
		{
			MethodName: "UpdateAudience",
			Handler:    _AuthwiseIdentityService_UpdateAudience_Handler,
		},
		{
			MethodName: "PatchAudience",
			Handler:    _AuthwiseIdentityService_PatchAudience_Handler,
		},
		{
			MethodName: "DeleteAudience",
			Handler:    _AuthwiseIdentityService_DeleteAudience_Handler,
		},
		{
			MethodName: "GetScope",
			Handler:    _AuthwiseIdentityService_GetScope_Handler,
		},
		{
			MethodName: "ListScopes",
			Handler:    _AuthwiseIdentityService_ListScopes_Handler,
		},
		{
			MethodName: "CreateScope",
			Handler:    _AuthwiseIdentityService_CreateScope_Handler,
		},
		{
			MethodName: "UpdateScope",
			Handler:    _AuthwiseIdentityService_UpdateScope_Handler,
		},
		{
			MethodName: "PatchScope",
			Handler:    _AuthwiseIdentityService_PatchScope_Handler,
		},
		{
			MethodName: "DeleteScope",
			Handler:    _AuthwiseIdentityService_DeleteScope_Handler,
		},
		{
			MethodName: "ListPermissionsByScope",
			Handler:    _AuthwiseIdentityService_ListPermissionsByScope_Handler,
		},
		{
			MethodName: "AssociatePermissionsToScope",
			Handler:    _AuthwiseIdentityService_AssociatePermissionsToScope_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _AuthwiseIdentityService_GetEvent_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _AuthwiseIdentityService_ListEvents_Handler,
		},
		{
			MethodName: "EventSearchPredicates",
			Handler:    _AuthwiseIdentityService_EventSearchPredicates_Handler,
		},
		{
			MethodName: "SearchEvents",
			Handler:    _AuthwiseIdentityService_SearchEvents_Handler,
		},
		{
			MethodName: "GetTheme",
			Handler:    _AuthwiseIdentityService_GetTheme_Handler,
		},
		{
			MethodName: "ListThemes",
			Handler:    _AuthwiseIdentityService_ListThemes_Handler,
		},
		{
			MethodName: "CreateTheme",
			Handler:    _AuthwiseIdentityService_CreateTheme_Handler,
		},
		{
			MethodName: "UpdateTheme",
			Handler:    _AuthwiseIdentityService_UpdateTheme_Handler,
		},
		{
			MethodName: "PatchTheme",
			Handler:    _AuthwiseIdentityService_PatchTheme_Handler,
		},
		{
			MethodName: "DeleteTheme",
			Handler:    _AuthwiseIdentityService_DeleteTheme_Handler,
		},
		{
			MethodName: "GetAppearanceProfile",
			Handler:    _AuthwiseIdentityService_GetAppearanceProfile_Handler,
		},
		{
			MethodName: "ListAppearanceProfiles",
			Handler:    _AuthwiseIdentityService_ListAppearanceProfiles_Handler,
		},
		{
			MethodName: "CreateAppearanceProfile",
			Handler:    _AuthwiseIdentityService_CreateAppearanceProfile_Handler,
		},
		{
			MethodName: "UpdateAppearanceProfile",
			Handler:    _AuthwiseIdentityService_UpdateAppearanceProfile_Handler,
		},
		{
			MethodName: "PatchAppearanceProfile",
			Handler:    _AuthwiseIdentityService_PatchAppearanceProfile_Handler,
		},
		{
			MethodName: "DeleteAppearanceProfile",
			Handler:    _AuthwiseIdentityService_DeleteAppearanceProfile_Handler,
		},
		{
			MethodName: "GetEndpoint",
			Handler:    _AuthwiseIdentityService_GetEndpoint_Handler,
		},
		{
			MethodName: "ListEndpoints",
			Handler:    _AuthwiseIdentityService_ListEndpoints_Handler,
		},
		{
			MethodName: "CreateEndpoint",
			Handler:    _AuthwiseIdentityService_CreateEndpoint_Handler,
		},
		{
			MethodName: "UpdateEndpoint",
			Handler:    _AuthwiseIdentityService_UpdateEndpoint_Handler,
		},
		{
			MethodName: "PatchEndpoint",
			Handler:    _AuthwiseIdentityService_PatchEndpoint_Handler,
		},
		{
			MethodName: "DeleteEndpoint",
			Handler:    _AuthwiseIdentityService_DeleteEndpoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAsset",
			Handler:       _AuthwiseIdentityService_UploadAsset_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadAsset",
			Handler:       _AuthwiseIdentityService_DownloadAsset_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "authwise/identity/v1alpha1/grpc.proto",
}
