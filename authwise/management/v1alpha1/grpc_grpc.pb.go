// GENERATED BY go:generate. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: authwise/management/v1alpha1/grpc.proto

package v1alpha1

import (
	context "context"
	v1alpha1 "github.com/authwisecom/api-client-go/authwise/auth/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthwiseManagementService_GetTenant_FullMethodName                   = "/authwise.management.v1alpha1.AuthwiseManagementService/GetTenant"
	AuthwiseManagementService_ListTenants_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/ListTenants"
	AuthwiseManagementService_CreateTenant_FullMethodName                = "/authwise.management.v1alpha1.AuthwiseManagementService/CreateTenant"
	AuthwiseManagementService_UpdateTenant_FullMethodName                = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateTenant"
	AuthwiseManagementService_DeleteTenant_FullMethodName                = "/authwise.management.v1alpha1.AuthwiseManagementService/DeleteTenant"
	AuthwiseManagementService_GetTenantConfig_FullMethodName             = "/authwise.management.v1alpha1.AuthwiseManagementService/GetTenantConfig"
	AuthwiseManagementService_UpdateTenantConfig_FullMethodName          = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateTenantConfig"
	AuthwiseManagementService_GetTenantUrl_FullMethodName                = "/authwise.management.v1alpha1.AuthwiseManagementService/GetTenantUrl"
	AuthwiseManagementService_ListTenantUrls_FullMethodName              = "/authwise.management.v1alpha1.AuthwiseManagementService/ListTenantUrls"
	AuthwiseManagementService_CreateTenantUrl_FullMethodName             = "/authwise.management.v1alpha1.AuthwiseManagementService/CreateTenantUrl"
	AuthwiseManagementService_UpdateTenantUrl_FullMethodName             = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateTenantUrl"
	AuthwiseManagementService_DeleteTenantUrl_FullMethodName             = "/authwise.management.v1alpha1.AuthwiseManagementService/DeleteTenantUrl"
	AuthwiseManagementService_GetTenantUrlConfig_FullMethodName          = "/authwise.management.v1alpha1.AuthwiseManagementService/GetTenantUrlConfig"
	AuthwiseManagementService_UpdateTenantUrlConfig_FullMethodName       = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateTenantUrlConfig"
	AuthwiseManagementService_GetUser_FullMethodName                     = "/authwise.management.v1alpha1.AuthwiseManagementService/GetUser"
	AuthwiseManagementService_ListUsers_FullMethodName                   = "/authwise.management.v1alpha1.AuthwiseManagementService/ListUsers"
	AuthwiseManagementService_UserSearchPredicates_FullMethodName        = "/authwise.management.v1alpha1.AuthwiseManagementService/UserSearchPredicates"
	AuthwiseManagementService_SearchUsers_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/SearchUsers"
	AuthwiseManagementService_CreateUser_FullMethodName                  = "/authwise.management.v1alpha1.AuthwiseManagementService/CreateUser"
	AuthwiseManagementService_UpdateUser_FullMethodName                  = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateUser"
	AuthwiseManagementService_DeleteUser_FullMethodName                  = "/authwise.management.v1alpha1.AuthwiseManagementService/DeleteUser"
	AuthwiseManagementService_ListRolesByUser_FullMethodName             = "/authwise.management.v1alpha1.AuthwiseManagementService/ListRolesByUser"
	AuthwiseManagementService_AssociateRolesToUser_FullMethodName        = "/authwise.management.v1alpha1.AuthwiseManagementService/AssociateRolesToUser"
	AuthwiseManagementService_GetProvider_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/GetProvider"
	AuthwiseManagementService_ListProviders_FullMethodName               = "/authwise.management.v1alpha1.AuthwiseManagementService/ListProviders"
	AuthwiseManagementService_CreateProvider_FullMethodName              = "/authwise.management.v1alpha1.AuthwiseManagementService/CreateProvider"
	AuthwiseManagementService_UpdateProvider_FullMethodName              = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateProvider"
	AuthwiseManagementService_DeleteProvider_FullMethodName              = "/authwise.management.v1alpha1.AuthwiseManagementService/DeleteProvider"
	AuthwiseManagementService_GetProviderConfig_FullMethodName           = "/authwise.management.v1alpha1.AuthwiseManagementService/GetProviderConfig"
	AuthwiseManagementService_UpdateProviderConfig_FullMethodName        = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateProviderConfig"
	AuthwiseManagementService_GetRealm_FullMethodName                    = "/authwise.management.v1alpha1.AuthwiseManagementService/GetRealm"
	AuthwiseManagementService_ListRealms_FullMethodName                  = "/authwise.management.v1alpha1.AuthwiseManagementService/ListRealms"
	AuthwiseManagementService_CreateRealm_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/CreateRealm"
	AuthwiseManagementService_UpdateRealm_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateRealm"
	AuthwiseManagementService_DeleteRealm_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/DeleteRealm"
	AuthwiseManagementService_GetClient_FullMethodName                   = "/authwise.management.v1alpha1.AuthwiseManagementService/GetClient"
	AuthwiseManagementService_ListClients_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/ListClients"
	AuthwiseManagementService_ListProvidersByClient_FullMethodName       = "/authwise.management.v1alpha1.AuthwiseManagementService/ListProvidersByClient"
	AuthwiseManagementService_AssociateProvidersToClient_FullMethodName  = "/authwise.management.v1alpha1.AuthwiseManagementService/AssociateProvidersToClient"
	AuthwiseManagementService_CreateClient_FullMethodName                = "/authwise.management.v1alpha1.AuthwiseManagementService/CreateClient"
	AuthwiseManagementService_UpdateClient_FullMethodName                = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateClient"
	AuthwiseManagementService_DeleteClient_FullMethodName                = "/authwise.management.v1alpha1.AuthwiseManagementService/DeleteClient"
	AuthwiseManagementService_GetClientConfig_FullMethodName             = "/authwise.management.v1alpha1.AuthwiseManagementService/GetClientConfig"
	AuthwiseManagementService_UpdateClientConfig_FullMethodName          = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateClientConfig"
	AuthwiseManagementService_GetRole_FullMethodName                     = "/authwise.management.v1alpha1.AuthwiseManagementService/GetRole"
	AuthwiseManagementService_ListRoles_FullMethodName                   = "/authwise.management.v1alpha1.AuthwiseManagementService/ListRoles"
	AuthwiseManagementService_ListPermissionsByRole_FullMethodName       = "/authwise.management.v1alpha1.AuthwiseManagementService/ListPermissionsByRole"
	AuthwiseManagementService_AssociatePermissionsToRole_FullMethodName  = "/authwise.management.v1alpha1.AuthwiseManagementService/AssociatePermissionsToRole"
	AuthwiseManagementService_CreateRole_FullMethodName                  = "/authwise.management.v1alpha1.AuthwiseManagementService/CreateRole"
	AuthwiseManagementService_UpdateRole_FullMethodName                  = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateRole"
	AuthwiseManagementService_DeleteRole_FullMethodName                  = "/authwise.management.v1alpha1.AuthwiseManagementService/DeleteRole"
	AuthwiseManagementService_GetPermission_FullMethodName               = "/authwise.management.v1alpha1.AuthwiseManagementService/GetPermission"
	AuthwiseManagementService_ListPermissions_FullMethodName             = "/authwise.management.v1alpha1.AuthwiseManagementService/ListPermissions"
	AuthwiseManagementService_CreatePermission_FullMethodName            = "/authwise.management.v1alpha1.AuthwiseManagementService/CreatePermission"
	AuthwiseManagementService_UpdatePermission_FullMethodName            = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdatePermission"
	AuthwiseManagementService_DeletePermission_FullMethodName            = "/authwise.management.v1alpha1.AuthwiseManagementService/DeletePermission"
	AuthwiseManagementService_GetAudience_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/GetAudience"
	AuthwiseManagementService_ListAudiences_FullMethodName               = "/authwise.management.v1alpha1.AuthwiseManagementService/ListAudiences"
	AuthwiseManagementService_CreateAudience_FullMethodName              = "/authwise.management.v1alpha1.AuthwiseManagementService/CreateAudience"
	AuthwiseManagementService_UpdateAudience_FullMethodName              = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateAudience"
	AuthwiseManagementService_DeleteAudience_FullMethodName              = "/authwise.management.v1alpha1.AuthwiseManagementService/DeleteAudience"
	AuthwiseManagementService_GetScope_FullMethodName                    = "/authwise.management.v1alpha1.AuthwiseManagementService/GetScope"
	AuthwiseManagementService_ListScopes_FullMethodName                  = "/authwise.management.v1alpha1.AuthwiseManagementService/ListScopes"
	AuthwiseManagementService_ListPermissionsByScope_FullMethodName      = "/authwise.management.v1alpha1.AuthwiseManagementService/ListPermissionsByScope"
	AuthwiseManagementService_AssociatePermissionsToScope_FullMethodName = "/authwise.management.v1alpha1.AuthwiseManagementService/AssociatePermissionsToScope"
	AuthwiseManagementService_CreateScope_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/CreateScope"
	AuthwiseManagementService_UpdateScope_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateScope"
	AuthwiseManagementService_DeleteScope_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/DeleteScope"
	AuthwiseManagementService_GetEvent_FullMethodName                    = "/authwise.management.v1alpha1.AuthwiseManagementService/GetEvent"
	AuthwiseManagementService_ListEvents_FullMethodName                  = "/authwise.management.v1alpha1.AuthwiseManagementService/ListEvents"
	AuthwiseManagementService_GetAppearanceProfile_FullMethodName        = "/authwise.management.v1alpha1.AuthwiseManagementService/GetAppearanceProfile"
	AuthwiseManagementService_ListAppearanceProfiles_FullMethodName      = "/authwise.management.v1alpha1.AuthwiseManagementService/ListAppearanceProfiles"
	AuthwiseManagementService_CreateAppearanceProfile_FullMethodName     = "/authwise.management.v1alpha1.AuthwiseManagementService/CreateAppearanceProfile"
	AuthwiseManagementService_UpdateAppearanceProfile_FullMethodName     = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateAppearanceProfile"
	AuthwiseManagementService_DeleteAppearanceProfile_FullMethodName     = "/authwise.management.v1alpha1.AuthwiseManagementService/DeleteAppearanceProfile"
	AuthwiseManagementService_GetTheme_FullMethodName                    = "/authwise.management.v1alpha1.AuthwiseManagementService/GetTheme"
	AuthwiseManagementService_ListThemes_FullMethodName                  = "/authwise.management.v1alpha1.AuthwiseManagementService/ListThemes"
	AuthwiseManagementService_CreateTheme_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/CreateTheme"
	AuthwiseManagementService_UpdateTheme_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/UpdateTheme"
	AuthwiseManagementService_DeleteTheme_FullMethodName                 = "/authwise.management.v1alpha1.AuthwiseManagementService/DeleteTheme"
)

// AuthwiseManagementServiceClient is the client API for AuthwiseManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthwiseManagementServiceClient interface {
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error)
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error)
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error)
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTenantConfig(ctx context.Context, in *GetTenantConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	UpdateTenantConfig(ctx context.Context, in *UpdateTenantConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	GetTenantUrl(ctx context.Context, in *GetTenantUrlRequest, opts ...grpc.CallOption) (*v1alpha1.TenantUrl, error)
	ListTenantUrls(ctx context.Context, in *ListTenantUrlsRequest, opts ...grpc.CallOption) (*ListTenantUrlsResponse, error)
	CreateTenantUrl(ctx context.Context, in *CreateTenantUrlRequest, opts ...grpc.CallOption) (*v1alpha1.TenantUrl, error)
	UpdateTenantUrl(ctx context.Context, in *UpdateTenantUrlRequest, opts ...grpc.CallOption) (*v1alpha1.TenantUrl, error)
	DeleteTenantUrl(ctx context.Context, in *DeleteTenantUrlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTenantUrlConfig(ctx context.Context, in *GetTenantUrlConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	UpdateTenantUrlConfig(ctx context.Context, in *UpdateTenantUrlConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	UserSearchPredicates(ctx context.Context, in *UserSearchPredicatesRequest, opts ...grpc.CallOption) (*UserSearchPredicatesResponse, error)
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListRolesByUser(ctx context.Context, in *ListRolesByUserRequest, opts ...grpc.CallOption) (*ListRolesByUserResponse, error)
	AssociateRolesToUser(ctx context.Context, in *AssociateRolesToUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error)
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	CreateProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error)
	UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error)
	DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProviderConfig(ctx context.Context, in *GetProviderConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	UpdateProviderConfig(ctx context.Context, in *UpdateProviderConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	GetRealm(ctx context.Context, in *GetRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error)
	ListRealms(ctx context.Context, in *ListRealmsRequest, opts ...grpc.CallOption) (*ListRealmsResponse, error)
	CreateRealm(ctx context.Context, in *CreateRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error)
	UpdateRealm(ctx context.Context, in *UpdateRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error)
	DeleteRealm(ctx context.Context, in *DeleteRealmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error)
	ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error)
	ListProvidersByClient(ctx context.Context, in *ListProvidersByClientRequest, opts ...grpc.CallOption) (*ListProvidersByClientResponse, error)
	AssociateProvidersToClient(ctx context.Context, in *AssociateProvidersToClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error)
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error)
	DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetClientConfig(ctx context.Context, in *GetClientConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	UpdateClientConfig(ctx context.Context, in *UpdateClientConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	ListPermissionsByRole(ctx context.Context, in *ListPermissionsByRoleRequest, opts ...grpc.CallOption) (*ListPermissionsByRoleResponse, error)
	AssociatePermissionsToRole(ctx context.Context, in *AssociatePermissionsToRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error)
	ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error)
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAudience(ctx context.Context, in *GetAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error)
	ListAudiences(ctx context.Context, in *ListAudiencesRequest, opts ...grpc.CallOption) (*ListAudiencesResponse, error)
	CreateAudience(ctx context.Context, in *CreateAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error)
	UpdateAudience(ctx context.Context, in *UpdateAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error)
	DeleteAudience(ctx context.Context, in *DeleteAudienceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetScope(ctx context.Context, in *GetScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error)
	ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*ListScopesResponse, error)
	ListPermissionsByScope(ctx context.Context, in *ListPermissionsByScopeRequest, opts ...grpc.CallOption) (*ListPermissionsByScopeResponse, error)
	AssociatePermissionsToScope(ctx context.Context, in *AssociatePermissionsToScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error)
	UpdateScope(ctx context.Context, in *UpdateScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error)
	DeleteScope(ctx context.Context, in *DeleteScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*v1alpha1.Event, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	GetAppearanceProfile(ctx context.Context, in *GetAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error)
	ListAppearanceProfiles(ctx context.Context, in *ListAppearanceProfilesRequest, opts ...grpc.CallOption) (*ListAppearanceProfilesResponse, error)
	CreateAppearanceProfile(ctx context.Context, in *CreateAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error)
	UpdateAppearanceProfile(ctx context.Context, in *UpdateAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error)
	DeleteAppearanceProfile(ctx context.Context, in *DeleteAppearanceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTheme(ctx context.Context, in *GetThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error)
	ListThemes(ctx context.Context, in *ListThemesRequest, opts ...grpc.CallOption) (*ListThemesResponse, error)
	CreateTheme(ctx context.Context, in *CreateThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error)
	UpdateTheme(ctx context.Context, in *UpdateThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error)
	DeleteTheme(ctx context.Context, in *DeleteThemeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authwiseManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthwiseManagementServiceClient(cc grpc.ClientConnInterface) AuthwiseManagementServiceClient {
	return &authwiseManagementServiceClient{cc}
}

func (c *authwiseManagementServiceClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error) {
	out := new(v1alpha1.Tenant)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListTenants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error) {
	out := new(v1alpha1.Tenant)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*v1alpha1.Tenant, error) {
	out := new(v1alpha1.Tenant)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeleteTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetTenantConfig(ctx context.Context, in *GetTenantConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetTenantConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateTenantConfig(ctx context.Context, in *UpdateTenantConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateTenantConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetTenantUrl(ctx context.Context, in *GetTenantUrlRequest, opts ...grpc.CallOption) (*v1alpha1.TenantUrl, error) {
	out := new(v1alpha1.TenantUrl)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetTenantUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListTenantUrls(ctx context.Context, in *ListTenantUrlsRequest, opts ...grpc.CallOption) (*ListTenantUrlsResponse, error) {
	out := new(ListTenantUrlsResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListTenantUrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreateTenantUrl(ctx context.Context, in *CreateTenantUrlRequest, opts ...grpc.CallOption) (*v1alpha1.TenantUrl, error) {
	out := new(v1alpha1.TenantUrl)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreateTenantUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateTenantUrl(ctx context.Context, in *UpdateTenantUrlRequest, opts ...grpc.CallOption) (*v1alpha1.TenantUrl, error) {
	out := new(v1alpha1.TenantUrl)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateTenantUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeleteTenantUrl(ctx context.Context, in *DeleteTenantUrlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeleteTenantUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetTenantUrlConfig(ctx context.Context, in *GetTenantUrlConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetTenantUrlConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateTenantUrlConfig(ctx context.Context, in *UpdateTenantUrlConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateTenantUrlConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error) {
	out := new(v1alpha1.User)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UserSearchPredicates(ctx context.Context, in *UserSearchPredicatesRequest, opts ...grpc.CallOption) (*UserSearchPredicatesResponse, error) {
	out := new(UserSearchPredicatesResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UserSearchPredicates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_SearchUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error) {
	out := new(v1alpha1.User)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*v1alpha1.User, error) {
	out := new(v1alpha1.User)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListRolesByUser(ctx context.Context, in *ListRolesByUserRequest, opts ...grpc.CallOption) (*ListRolesByUserResponse, error) {
	out := new(ListRolesByUserResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListRolesByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) AssociateRolesToUser(ctx context.Context, in *AssociateRolesToUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_AssociateRolesToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error) {
	out := new(v1alpha1.Provider)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreateProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error) {
	out := new(v1alpha1.Provider)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreateProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*v1alpha1.Provider, error) {
	out := new(v1alpha1.Provider)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeleteProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetProviderConfig(ctx context.Context, in *GetProviderConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetProviderConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateProviderConfig(ctx context.Context, in *UpdateProviderConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateProviderConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetRealm(ctx context.Context, in *GetRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error) {
	out := new(v1alpha1.Realm)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetRealm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListRealms(ctx context.Context, in *ListRealmsRequest, opts ...grpc.CallOption) (*ListRealmsResponse, error) {
	out := new(ListRealmsResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListRealms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreateRealm(ctx context.Context, in *CreateRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error) {
	out := new(v1alpha1.Realm)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreateRealm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateRealm(ctx context.Context, in *UpdateRealmRequest, opts ...grpc.CallOption) (*v1alpha1.Realm, error) {
	out := new(v1alpha1.Realm)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateRealm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeleteRealm(ctx context.Context, in *DeleteRealmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeleteRealm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error) {
	out := new(v1alpha1.Client)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	out := new(ListClientsResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListProvidersByClient(ctx context.Context, in *ListProvidersByClientRequest, opts ...grpc.CallOption) (*ListProvidersByClientResponse, error) {
	out := new(ListProvidersByClientResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListProvidersByClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) AssociateProvidersToClient(ctx context.Context, in *AssociateProvidersToClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_AssociateProvidersToClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error) {
	out := new(v1alpha1.Client)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*v1alpha1.Client, error) {
	out := new(v1alpha1.Client)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeleteClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetClientConfig(ctx context.Context, in *GetClientConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetClientConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateClientConfig(ctx context.Context, in *UpdateClientConfigRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateClientConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error) {
	out := new(v1alpha1.Role)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListPermissionsByRole(ctx context.Context, in *ListPermissionsByRoleRequest, opts ...grpc.CallOption) (*ListPermissionsByRoleResponse, error) {
	out := new(ListPermissionsByRoleResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListPermissionsByRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) AssociatePermissionsToRole(ctx context.Context, in *AssociatePermissionsToRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_AssociatePermissionsToRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error) {
	out := new(v1alpha1.Role)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*v1alpha1.Role, error) {
	out := new(v1alpha1.Role)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error) {
	out := new(v1alpha1.Permission)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error) {
	out := new(v1alpha1.Permission)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreatePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*v1alpha1.Permission, error) {
	out := new(v1alpha1.Permission)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdatePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeletePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetAudience(ctx context.Context, in *GetAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error) {
	out := new(v1alpha1.Audience)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetAudience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListAudiences(ctx context.Context, in *ListAudiencesRequest, opts ...grpc.CallOption) (*ListAudiencesResponse, error) {
	out := new(ListAudiencesResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListAudiences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreateAudience(ctx context.Context, in *CreateAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error) {
	out := new(v1alpha1.Audience)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreateAudience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateAudience(ctx context.Context, in *UpdateAudienceRequest, opts ...grpc.CallOption) (*v1alpha1.Audience, error) {
	out := new(v1alpha1.Audience)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateAudience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeleteAudience(ctx context.Context, in *DeleteAudienceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeleteAudience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetScope(ctx context.Context, in *GetScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error) {
	out := new(v1alpha1.Scope)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*ListScopesResponse, error) {
	out := new(ListScopesResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListPermissionsByScope(ctx context.Context, in *ListPermissionsByScopeRequest, opts ...grpc.CallOption) (*ListPermissionsByScopeResponse, error) {
	out := new(ListPermissionsByScopeResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListPermissionsByScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) AssociatePermissionsToScope(ctx context.Context, in *AssociatePermissionsToScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_AssociatePermissionsToScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error) {
	out := new(v1alpha1.Scope)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreateScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateScope(ctx context.Context, in *UpdateScopeRequest, opts ...grpc.CallOption) (*v1alpha1.Scope, error) {
	out := new(v1alpha1.Scope)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeleteScope(ctx context.Context, in *DeleteScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeleteScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*v1alpha1.Event, error) {
	out := new(v1alpha1.Event)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetAppearanceProfile(ctx context.Context, in *GetAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error) {
	out := new(v1alpha1.AppearanceProfile)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetAppearanceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListAppearanceProfiles(ctx context.Context, in *ListAppearanceProfilesRequest, opts ...grpc.CallOption) (*ListAppearanceProfilesResponse, error) {
	out := new(ListAppearanceProfilesResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListAppearanceProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreateAppearanceProfile(ctx context.Context, in *CreateAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error) {
	out := new(v1alpha1.AppearanceProfile)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreateAppearanceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateAppearanceProfile(ctx context.Context, in *UpdateAppearanceProfileRequest, opts ...grpc.CallOption) (*v1alpha1.AppearanceProfile, error) {
	out := new(v1alpha1.AppearanceProfile)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateAppearanceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeleteAppearanceProfile(ctx context.Context, in *DeleteAppearanceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeleteAppearanceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) GetTheme(ctx context.Context, in *GetThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error) {
	out := new(v1alpha1.Theme)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_GetTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) ListThemes(ctx context.Context, in *ListThemesRequest, opts ...grpc.CallOption) (*ListThemesResponse, error) {
	out := new(ListThemesResponse)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_ListThemes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) CreateTheme(ctx context.Context, in *CreateThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error) {
	out := new(v1alpha1.Theme)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_CreateTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) UpdateTheme(ctx context.Context, in *UpdateThemeRequest, opts ...grpc.CallOption) (*v1alpha1.Theme, error) {
	out := new(v1alpha1.Theme)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_UpdateTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authwiseManagementServiceClient) DeleteTheme(ctx context.Context, in *DeleteThemeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthwiseManagementService_DeleteTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthwiseManagementServiceServer is the server API for AuthwiseManagementService service.
// All implementations should embed UnimplementedAuthwiseManagementServiceServer
// for forward compatibility
type AuthwiseManagementServiceServer interface {
	GetTenant(context.Context, *GetTenantRequest) (*v1alpha1.Tenant, error)
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	CreateTenant(context.Context, *CreateTenantRequest) (*v1alpha1.Tenant, error)
	UpdateTenant(context.Context, *UpdateTenantRequest) (*v1alpha1.Tenant, error)
	DeleteTenant(context.Context, *DeleteTenantRequest) (*emptypb.Empty, error)
	GetTenantConfig(context.Context, *GetTenantConfigRequest) (*structpb.Struct, error)
	UpdateTenantConfig(context.Context, *UpdateTenantConfigRequest) (*structpb.Struct, error)
	GetTenantUrl(context.Context, *GetTenantUrlRequest) (*v1alpha1.TenantUrl, error)
	ListTenantUrls(context.Context, *ListTenantUrlsRequest) (*ListTenantUrlsResponse, error)
	CreateTenantUrl(context.Context, *CreateTenantUrlRequest) (*v1alpha1.TenantUrl, error)
	UpdateTenantUrl(context.Context, *UpdateTenantUrlRequest) (*v1alpha1.TenantUrl, error)
	DeleteTenantUrl(context.Context, *DeleteTenantUrlRequest) (*emptypb.Empty, error)
	GetTenantUrlConfig(context.Context, *GetTenantUrlConfigRequest) (*structpb.Struct, error)
	UpdateTenantUrlConfig(context.Context, *UpdateTenantUrlConfigRequest) (*structpb.Struct, error)
	GetUser(context.Context, *GetUserRequest) (*v1alpha1.User, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	UserSearchPredicates(context.Context, *UserSearchPredicatesRequest) (*UserSearchPredicatesResponse, error)
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*v1alpha1.User, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*v1alpha1.User, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	ListRolesByUser(context.Context, *ListRolesByUserRequest) (*ListRolesByUserResponse, error)
	AssociateRolesToUser(context.Context, *AssociateRolesToUserRequest) (*emptypb.Empty, error)
	GetProvider(context.Context, *GetProviderRequest) (*v1alpha1.Provider, error)
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	CreateProvider(context.Context, *CreateProviderRequest) (*v1alpha1.Provider, error)
	UpdateProvider(context.Context, *UpdateProviderRequest) (*v1alpha1.Provider, error)
	DeleteProvider(context.Context, *DeleteProviderRequest) (*emptypb.Empty, error)
	GetProviderConfig(context.Context, *GetProviderConfigRequest) (*structpb.Struct, error)
	UpdateProviderConfig(context.Context, *UpdateProviderConfigRequest) (*structpb.Struct, error)
	GetRealm(context.Context, *GetRealmRequest) (*v1alpha1.Realm, error)
	ListRealms(context.Context, *ListRealmsRequest) (*ListRealmsResponse, error)
	CreateRealm(context.Context, *CreateRealmRequest) (*v1alpha1.Realm, error)
	UpdateRealm(context.Context, *UpdateRealmRequest) (*v1alpha1.Realm, error)
	DeleteRealm(context.Context, *DeleteRealmRequest) (*emptypb.Empty, error)
	GetClient(context.Context, *GetClientRequest) (*v1alpha1.Client, error)
	ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error)
	ListProvidersByClient(context.Context, *ListProvidersByClientRequest) (*ListProvidersByClientResponse, error)
	AssociateProvidersToClient(context.Context, *AssociateProvidersToClientRequest) (*emptypb.Empty, error)
	CreateClient(context.Context, *CreateClientRequest) (*v1alpha1.Client, error)
	UpdateClient(context.Context, *UpdateClientRequest) (*v1alpha1.Client, error)
	DeleteClient(context.Context, *DeleteClientRequest) (*emptypb.Empty, error)
	GetClientConfig(context.Context, *GetClientConfigRequest) (*structpb.Struct, error)
	UpdateClientConfig(context.Context, *UpdateClientConfigRequest) (*structpb.Struct, error)
	GetRole(context.Context, *GetRoleRequest) (*v1alpha1.Role, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	ListPermissionsByRole(context.Context, *ListPermissionsByRoleRequest) (*ListPermissionsByRoleResponse, error)
	AssociatePermissionsToRole(context.Context, *AssociatePermissionsToRoleRequest) (*emptypb.Empty, error)
	CreateRole(context.Context, *CreateRoleRequest) (*v1alpha1.Role, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*v1alpha1.Role, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	GetPermission(context.Context, *GetPermissionRequest) (*v1alpha1.Permission, error)
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	CreatePermission(context.Context, *CreatePermissionRequest) (*v1alpha1.Permission, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*v1alpha1.Permission, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*emptypb.Empty, error)
	GetAudience(context.Context, *GetAudienceRequest) (*v1alpha1.Audience, error)
	ListAudiences(context.Context, *ListAudiencesRequest) (*ListAudiencesResponse, error)
	CreateAudience(context.Context, *CreateAudienceRequest) (*v1alpha1.Audience, error)
	UpdateAudience(context.Context, *UpdateAudienceRequest) (*v1alpha1.Audience, error)
	DeleteAudience(context.Context, *DeleteAudienceRequest) (*emptypb.Empty, error)
	GetScope(context.Context, *GetScopeRequest) (*v1alpha1.Scope, error)
	ListScopes(context.Context, *ListScopesRequest) (*ListScopesResponse, error)
	ListPermissionsByScope(context.Context, *ListPermissionsByScopeRequest) (*ListPermissionsByScopeResponse, error)
	AssociatePermissionsToScope(context.Context, *AssociatePermissionsToScopeRequest) (*emptypb.Empty, error)
	CreateScope(context.Context, *CreateScopeRequest) (*v1alpha1.Scope, error)
	UpdateScope(context.Context, *UpdateScopeRequest) (*v1alpha1.Scope, error)
	DeleteScope(context.Context, *DeleteScopeRequest) (*emptypb.Empty, error)
	GetEvent(context.Context, *GetEventRequest) (*v1alpha1.Event, error)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	GetAppearanceProfile(context.Context, *GetAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error)
	ListAppearanceProfiles(context.Context, *ListAppearanceProfilesRequest) (*ListAppearanceProfilesResponse, error)
	CreateAppearanceProfile(context.Context, *CreateAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error)
	UpdateAppearanceProfile(context.Context, *UpdateAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error)
	DeleteAppearanceProfile(context.Context, *DeleteAppearanceProfileRequest) (*emptypb.Empty, error)
	GetTheme(context.Context, *GetThemeRequest) (*v1alpha1.Theme, error)
	ListThemes(context.Context, *ListThemesRequest) (*ListThemesResponse, error)
	CreateTheme(context.Context, *CreateThemeRequest) (*v1alpha1.Theme, error)
	UpdateTheme(context.Context, *UpdateThemeRequest) (*v1alpha1.Theme, error)
	DeleteTheme(context.Context, *DeleteThemeRequest) (*emptypb.Empty, error)
}

// UnimplementedAuthwiseManagementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthwiseManagementServiceServer struct {
}

func (UnimplementedAuthwiseManagementServiceServer) GetTenant(context.Context, *GetTenantRequest) (*v1alpha1.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreateTenant(context.Context, *CreateTenantRequest) (*v1alpha1.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateTenant(context.Context, *UpdateTenantRequest) (*v1alpha1.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeleteTenant(context.Context, *DeleteTenantRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetTenantConfig(context.Context, *GetTenantConfigRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantConfig not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateTenantConfig(context.Context, *UpdateTenantConfigRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantConfig not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetTenantUrl(context.Context, *GetTenantUrlRequest) (*v1alpha1.TenantUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantUrl not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListTenantUrls(context.Context, *ListTenantUrlsRequest) (*ListTenantUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenantUrls not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreateTenantUrl(context.Context, *CreateTenantUrlRequest) (*v1alpha1.TenantUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenantUrl not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateTenantUrl(context.Context, *UpdateTenantUrlRequest) (*v1alpha1.TenantUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantUrl not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeleteTenantUrl(context.Context, *DeleteTenantUrlRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenantUrl not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetTenantUrlConfig(context.Context, *GetTenantUrlConfigRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantUrlConfig not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateTenantUrlConfig(context.Context, *UpdateTenantUrlConfigRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantUrlConfig not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetUser(context.Context, *GetUserRequest) (*v1alpha1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UserSearchPredicates(context.Context, *UserSearchPredicatesRequest) (*UserSearchPredicatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSearchPredicates not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreateUser(context.Context, *CreateUserRequest) (*v1alpha1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*v1alpha1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListRolesByUser(context.Context, *ListRolesByUserRequest) (*ListRolesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolesByUser not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) AssociateRolesToUser(context.Context, *AssociateRolesToUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateRolesToUser not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetProvider(context.Context, *GetProviderRequest) (*v1alpha1.Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvider not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreateProvider(context.Context, *CreateProviderRequest) (*v1alpha1.Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProvider not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateProvider(context.Context, *UpdateProviderRequest) (*v1alpha1.Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProvider not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeleteProvider(context.Context, *DeleteProviderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetProviderConfig(context.Context, *GetProviderConfigRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderConfig not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateProviderConfig(context.Context, *UpdateProviderConfigRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProviderConfig not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetRealm(context.Context, *GetRealmRequest) (*v1alpha1.Realm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealm not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListRealms(context.Context, *ListRealmsRequest) (*ListRealmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRealms not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreateRealm(context.Context, *CreateRealmRequest) (*v1alpha1.Realm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRealm not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateRealm(context.Context, *UpdateRealmRequest) (*v1alpha1.Realm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRealm not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeleteRealm(context.Context, *DeleteRealmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRealm not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetClient(context.Context, *GetClientRequest) (*v1alpha1.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListProvidersByClient(context.Context, *ListProvidersByClientRequest) (*ListProvidersByClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProvidersByClient not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) AssociateProvidersToClient(context.Context, *AssociateProvidersToClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateProvidersToClient not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreateClient(context.Context, *CreateClientRequest) (*v1alpha1.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateClient(context.Context, *UpdateClientRequest) (*v1alpha1.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeleteClient(context.Context, *DeleteClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetClientConfig(context.Context, *GetClientConfigRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientConfig not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateClientConfig(context.Context, *UpdateClientConfigRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientConfig not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetRole(context.Context, *GetRoleRequest) (*v1alpha1.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListPermissionsByRole(context.Context, *ListPermissionsByRoleRequest) (*ListPermissionsByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionsByRole not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) AssociatePermissionsToRole(context.Context, *AssociatePermissionsToRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociatePermissionsToRole not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*v1alpha1.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*v1alpha1.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetPermission(context.Context, *GetPermissionRequest) (*v1alpha1.Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreatePermission(context.Context, *CreatePermissionRequest) (*v1alpha1.Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdatePermission(context.Context, *UpdatePermissionRequest) (*v1alpha1.Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeletePermission(context.Context, *DeletePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetAudience(context.Context, *GetAudienceRequest) (*v1alpha1.Audience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudience not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListAudiences(context.Context, *ListAudiencesRequest) (*ListAudiencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAudiences not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreateAudience(context.Context, *CreateAudienceRequest) (*v1alpha1.Audience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAudience not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateAudience(context.Context, *UpdateAudienceRequest) (*v1alpha1.Audience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAudience not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeleteAudience(context.Context, *DeleteAudienceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAudience not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetScope(context.Context, *GetScopeRequest) (*v1alpha1.Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScope not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListScopes(context.Context, *ListScopesRequest) (*ListScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScopes not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListPermissionsByScope(context.Context, *ListPermissionsByScopeRequest) (*ListPermissionsByScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionsByScope not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) AssociatePermissionsToScope(context.Context, *AssociatePermissionsToScopeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociatePermissionsToScope not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreateScope(context.Context, *CreateScopeRequest) (*v1alpha1.Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScope not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateScope(context.Context, *UpdateScopeRequest) (*v1alpha1.Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScope not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeleteScope(context.Context, *DeleteScopeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScope not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetEvent(context.Context, *GetEventRequest) (*v1alpha1.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetAppearanceProfile(context.Context, *GetAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppearanceProfile not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListAppearanceProfiles(context.Context, *ListAppearanceProfilesRequest) (*ListAppearanceProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppearanceProfiles not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreateAppearanceProfile(context.Context, *CreateAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppearanceProfile not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateAppearanceProfile(context.Context, *UpdateAppearanceProfileRequest) (*v1alpha1.AppearanceProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppearanceProfile not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeleteAppearanceProfile(context.Context, *DeleteAppearanceProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppearanceProfile not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) GetTheme(context.Context, *GetThemeRequest) (*v1alpha1.Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheme not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) ListThemes(context.Context, *ListThemesRequest) (*ListThemesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThemes not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) CreateTheme(context.Context, *CreateThemeRequest) (*v1alpha1.Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTheme not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) UpdateTheme(context.Context, *UpdateThemeRequest) (*v1alpha1.Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTheme not implemented")
}
func (UnimplementedAuthwiseManagementServiceServer) DeleteTheme(context.Context, *DeleteThemeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTheme not implemented")
}

// UnsafeAuthwiseManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthwiseManagementServiceServer will
// result in compilation errors.
type UnsafeAuthwiseManagementServiceServer interface {
	mustEmbedUnimplementedAuthwiseManagementServiceServer()
}

func RegisterAuthwiseManagementServiceServer(s grpc.ServiceRegistrar, srv AuthwiseManagementServiceServer) {
	s.RegisterService(&AuthwiseManagementService_ServiceDesc, srv)
}

func _AuthwiseManagementService_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetTenantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetTenantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetTenantConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetTenantConfig(ctx, req.(*GetTenantConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateTenantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateTenantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateTenantConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateTenantConfig(ctx, req.(*UpdateTenantConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetTenantUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetTenantUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetTenantUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetTenantUrl(ctx, req.(*GetTenantUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListTenantUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListTenantUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListTenantUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListTenantUrls(ctx, req.(*ListTenantUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreateTenantUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreateTenantUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreateTenantUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreateTenantUrl(ctx, req.(*CreateTenantUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateTenantUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateTenantUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateTenantUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateTenantUrl(ctx, req.(*UpdateTenantUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeleteTenantUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeleteTenantUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeleteTenantUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeleteTenantUrl(ctx, req.(*DeleteTenantUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetTenantUrlConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantUrlConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetTenantUrlConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetTenantUrlConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetTenantUrlConfig(ctx, req.(*GetTenantUrlConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateTenantUrlConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantUrlConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateTenantUrlConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateTenantUrlConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateTenantUrlConfig(ctx, req.(*UpdateTenantUrlConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UserSearchPredicates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSearchPredicatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UserSearchPredicates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UserSearchPredicates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UserSearchPredicates(ctx, req.(*UserSearchPredicatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListRolesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListRolesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListRolesByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListRolesByUser(ctx, req.(*ListRolesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_AssociateRolesToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateRolesToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).AssociateRolesToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_AssociateRolesToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).AssociateRolesToUser(ctx, req.(*AssociateRolesToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetProvider(ctx, req.(*GetProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreateProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreateProvider(ctx, req.(*CreateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateProvider(ctx, req.(*UpdateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeleteProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeleteProvider(ctx, req.(*DeleteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetProviderConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetProviderConfig(ctx, req.(*GetProviderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProviderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateProviderConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateProviderConfig(ctx, req.(*UpdateProviderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetRealm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetRealm(ctx, req.(*GetRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListRealms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRealmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListRealms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListRealms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListRealms(ctx, req.(*ListRealmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreateRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreateRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreateRealm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreateRealm(ctx, req.(*CreateRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateRealm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateRealm(ctx, req.(*UpdateRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeleteRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeleteRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeleteRealm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeleteRealm(ctx, req.(*DeleteRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetClient(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListClients(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListProvidersByClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersByClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListProvidersByClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListProvidersByClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListProvidersByClient(ctx, req.(*ListProvidersByClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_AssociateProvidersToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateProvidersToClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).AssociateProvidersToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_AssociateProvidersToClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).AssociateProvidersToClient(ctx, req.(*AssociateProvidersToClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeleteClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeleteClient(ctx, req.(*DeleteClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetClientConfig(ctx, req.(*GetClientConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateClientConfig(ctx, req.(*UpdateClientConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListPermissionsByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListPermissionsByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListPermissionsByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListPermissionsByRole(ctx, req.(*ListPermissionsByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_AssociatePermissionsToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociatePermissionsToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).AssociatePermissionsToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_AssociatePermissionsToRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).AssociatePermissionsToRole(ctx, req.(*AssociatePermissionsToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListPermissions(ctx, req.(*ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetAudience(ctx, req.(*GetAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListAudiences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAudiencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListAudiences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListAudiences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListAudiences(ctx, req.(*ListAudiencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreateAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreateAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreateAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreateAudience(ctx, req.(*CreateAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateAudience(ctx, req.(*UpdateAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeleteAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeleteAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeleteAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeleteAudience(ctx, req.(*DeleteAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetScope(ctx, req.(*GetScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListScopes(ctx, req.(*ListScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListPermissionsByScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsByScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListPermissionsByScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListPermissionsByScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListPermissionsByScope(ctx, req.(*ListPermissionsByScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_AssociatePermissionsToScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociatePermissionsToScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).AssociatePermissionsToScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_AssociatePermissionsToScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).AssociatePermissionsToScope(ctx, req.(*AssociatePermissionsToScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreateScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreateScope(ctx, req.(*CreateScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateScope(ctx, req.(*UpdateScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeleteScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeleteScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeleteScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeleteScope(ctx, req.(*DeleteScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetAppearanceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppearanceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetAppearanceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetAppearanceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetAppearanceProfile(ctx, req.(*GetAppearanceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListAppearanceProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppearanceProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListAppearanceProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListAppearanceProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListAppearanceProfiles(ctx, req.(*ListAppearanceProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreateAppearanceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppearanceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreateAppearanceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreateAppearanceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreateAppearanceProfile(ctx, req.(*CreateAppearanceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateAppearanceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppearanceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateAppearanceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateAppearanceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateAppearanceProfile(ctx, req.(*UpdateAppearanceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeleteAppearanceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppearanceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeleteAppearanceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeleteAppearanceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeleteAppearanceProfile(ctx, req.(*DeleteAppearanceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_GetTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).GetTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_GetTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).GetTheme(ctx, req.(*GetThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_ListThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThemesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).ListThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_ListThemes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).ListThemes(ctx, req.(*ListThemesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_CreateTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).CreateTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_CreateTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).CreateTheme(ctx, req.(*CreateThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_UpdateTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).UpdateTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_UpdateTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).UpdateTheme(ctx, req.(*UpdateThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthwiseManagementService_DeleteTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthwiseManagementServiceServer).DeleteTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthwiseManagementService_DeleteTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthwiseManagementServiceServer).DeleteTheme(ctx, req.(*DeleteThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthwiseManagementService_ServiceDesc is the grpc.ServiceDesc for AuthwiseManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthwiseManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authwise.management.v1alpha1.AuthwiseManagementService",
	HandlerType: (*AuthwiseManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenant",
			Handler:    _AuthwiseManagementService_GetTenant_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _AuthwiseManagementService_ListTenants_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _AuthwiseManagementService_CreateTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _AuthwiseManagementService_UpdateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _AuthwiseManagementService_DeleteTenant_Handler,
		},
		{
			MethodName: "GetTenantConfig",
			Handler:    _AuthwiseManagementService_GetTenantConfig_Handler,
		},
		{
			MethodName: "UpdateTenantConfig",
			Handler:    _AuthwiseManagementService_UpdateTenantConfig_Handler,
		},
		{
			MethodName: "GetTenantUrl",
			Handler:    _AuthwiseManagementService_GetTenantUrl_Handler,
		},
		{
			MethodName: "ListTenantUrls",
			Handler:    _AuthwiseManagementService_ListTenantUrls_Handler,
		},
		{
			MethodName: "CreateTenantUrl",
			Handler:    _AuthwiseManagementService_CreateTenantUrl_Handler,
		},
		{
			MethodName: "UpdateTenantUrl",
			Handler:    _AuthwiseManagementService_UpdateTenantUrl_Handler,
		},
		{
			MethodName: "DeleteTenantUrl",
			Handler:    _AuthwiseManagementService_DeleteTenantUrl_Handler,
		},
		{
			MethodName: "GetTenantUrlConfig",
			Handler:    _AuthwiseManagementService_GetTenantUrlConfig_Handler,
		},
		{
			MethodName: "UpdateTenantUrlConfig",
			Handler:    _AuthwiseManagementService_UpdateTenantUrlConfig_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthwiseManagementService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _AuthwiseManagementService_ListUsers_Handler,
		},
		{
			MethodName: "UserSearchPredicates",
			Handler:    _AuthwiseManagementService_UserSearchPredicates_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _AuthwiseManagementService_SearchUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthwiseManagementService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthwiseManagementService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthwiseManagementService_DeleteUser_Handler,
		},
		{
			MethodName: "ListRolesByUser",
			Handler:    _AuthwiseManagementService_ListRolesByUser_Handler,
		},
		{
			MethodName: "AssociateRolesToUser",
			Handler:    _AuthwiseManagementService_AssociateRolesToUser_Handler,
		},
		{
			MethodName: "GetProvider",
			Handler:    _AuthwiseManagementService_GetProvider_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _AuthwiseManagementService_ListProviders_Handler,
		},
		{
			MethodName: "CreateProvider",
			Handler:    _AuthwiseManagementService_CreateProvider_Handler,
		},
		{
			MethodName: "UpdateProvider",
			Handler:    _AuthwiseManagementService_UpdateProvider_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _AuthwiseManagementService_DeleteProvider_Handler,
		},
		{
			MethodName: "GetProviderConfig",
			Handler:    _AuthwiseManagementService_GetProviderConfig_Handler,
		},
		{
			MethodName: "UpdateProviderConfig",
			Handler:    _AuthwiseManagementService_UpdateProviderConfig_Handler,
		},
		{
			MethodName: "GetRealm",
			Handler:    _AuthwiseManagementService_GetRealm_Handler,
		},
		{
			MethodName: "ListRealms",
			Handler:    _AuthwiseManagementService_ListRealms_Handler,
		},
		{
			MethodName: "CreateRealm",
			Handler:    _AuthwiseManagementService_CreateRealm_Handler,
		},
		{
			MethodName: "UpdateRealm",
			Handler:    _AuthwiseManagementService_UpdateRealm_Handler,
		},
		{
			MethodName: "DeleteRealm",
			Handler:    _AuthwiseManagementService_DeleteRealm_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _AuthwiseManagementService_GetClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _AuthwiseManagementService_ListClients_Handler,
		},
		{
			MethodName: "ListProvidersByClient",
			Handler:    _AuthwiseManagementService_ListProvidersByClient_Handler,
		},
		{
			MethodName: "AssociateProvidersToClient",
			Handler:    _AuthwiseManagementService_AssociateProvidersToClient_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _AuthwiseManagementService_CreateClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _AuthwiseManagementService_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _AuthwiseManagementService_DeleteClient_Handler,
		},
		{
			MethodName: "GetClientConfig",
			Handler:    _AuthwiseManagementService_GetClientConfig_Handler,
		},
		{
			MethodName: "UpdateClientConfig",
			Handler:    _AuthwiseManagementService_UpdateClientConfig_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _AuthwiseManagementService_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _AuthwiseManagementService_ListRoles_Handler,
		},
		{
			MethodName: "ListPermissionsByRole",
			Handler:    _AuthwiseManagementService_ListPermissionsByRole_Handler,
		},
		{
			MethodName: "AssociatePermissionsToRole",
			Handler:    _AuthwiseManagementService_AssociatePermissionsToRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AuthwiseManagementService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AuthwiseManagementService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AuthwiseManagementService_DeleteRole_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _AuthwiseManagementService_GetPermission_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _AuthwiseManagementService_ListPermissions_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _AuthwiseManagementService_CreatePermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _AuthwiseManagementService_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _AuthwiseManagementService_DeletePermission_Handler,
		},
		{
			MethodName: "GetAudience",
			Handler:    _AuthwiseManagementService_GetAudience_Handler,
		},
		{
			MethodName: "ListAudiences",
			Handler:    _AuthwiseManagementService_ListAudiences_Handler,
		},
		{
			MethodName: "CreateAudience",
			Handler:    _AuthwiseManagementService_CreateAudience_Handler,
		},
		{
			MethodName: "UpdateAudience",
			Handler:    _AuthwiseManagementService_UpdateAudience_Handler,
		},
		{
			MethodName: "DeleteAudience",
			Handler:    _AuthwiseManagementService_DeleteAudience_Handler,
		},
		{
			MethodName: "GetScope",
			Handler:    _AuthwiseManagementService_GetScope_Handler,
		},
		{
			MethodName: "ListScopes",
			Handler:    _AuthwiseManagementService_ListScopes_Handler,
		},
		{
			MethodName: "ListPermissionsByScope",
			Handler:    _AuthwiseManagementService_ListPermissionsByScope_Handler,
		},
		{
			MethodName: "AssociatePermissionsToScope",
			Handler:    _AuthwiseManagementService_AssociatePermissionsToScope_Handler,
		},
		{
			MethodName: "CreateScope",
			Handler:    _AuthwiseManagementService_CreateScope_Handler,
		},
		{
			MethodName: "UpdateScope",
			Handler:    _AuthwiseManagementService_UpdateScope_Handler,
		},
		{
			MethodName: "DeleteScope",
			Handler:    _AuthwiseManagementService_DeleteScope_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _AuthwiseManagementService_GetEvent_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _AuthwiseManagementService_ListEvents_Handler,
		},
		{
			MethodName: "GetAppearanceProfile",
			Handler:    _AuthwiseManagementService_GetAppearanceProfile_Handler,
		},
		{
			MethodName: "ListAppearanceProfiles",
			Handler:    _AuthwiseManagementService_ListAppearanceProfiles_Handler,
		},
		{
			MethodName: "CreateAppearanceProfile",
			Handler:    _AuthwiseManagementService_CreateAppearanceProfile_Handler,
		},
		{
			MethodName: "UpdateAppearanceProfile",
			Handler:    _AuthwiseManagementService_UpdateAppearanceProfile_Handler,
		},
		{
			MethodName: "DeleteAppearanceProfile",
			Handler:    _AuthwiseManagementService_DeleteAppearanceProfile_Handler,
		},
		{
			MethodName: "GetTheme",
			Handler:    _AuthwiseManagementService_GetTheme_Handler,
		},
		{
			MethodName: "ListThemes",
			Handler:    _AuthwiseManagementService_ListThemes_Handler,
		},
		{
			MethodName: "CreateTheme",
			Handler:    _AuthwiseManagementService_CreateTheme_Handler,
		},
		{
			MethodName: "UpdateTheme",
			Handler:    _AuthwiseManagementService_UpdateTheme_Handler,
		},
		{
			MethodName: "DeleteTheme",
			Handler:    _AuthwiseManagementService_DeleteTheme_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authwise/management/v1alpha1/grpc.proto",
}
